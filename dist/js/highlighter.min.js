(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

// calibaration algorithms for x and Y positions of points
exports.default = function () {

	function calibarateX(clientX, parents, canvasContainer, calibarationLevel, lang) {
		var elementX = clientX;
		elementX = calibarateElementX(elementX, parents);
		elementX = calibarateScrollLeft(elementX, parents, canvasContainer);
		elementX = calibarateScaleX(elementX, canvasContainer, calibarationLevel, lang);
		return elementX;
	}

	function calibarateY(clientY, parents, canvasContainer, calibarationLevel, transformOriginY) {
		var elementY = clientY;
		elementY = calibarateElementY(elementY, parents);
		elementY = calibarateScrollTop(elementY, parents, canvasContainer);
		elementY = calibarateScaleY(elementY, canvasContainer, calibarationLevel, transformOriginY);
		return elementY;
	}

	// in case of absolute divs only - calculate left
	function calibarateElementX(clientX, parents) {
		var additions = 0;
		var accumOffsetLeft = 0;
		parents = parents.toArray().reverse();
		parents.forEach(function (element, number) {
			additions += element.getBoundingClientRect().left - accumOffsetLeft;
			accumOffsetLeft += element.getBoundingClientRect().left;
		});
		return clientX - additions;
	}

	// in case of absolute divs only - calculate top
	function calibarateElementY(clientY, parents) {
		var additions = 0;
		var accumOffsetTop = 0;
		parents = parents.toArray().reverse();
		parents.forEach(function (element, number) {
			additions += element.getBoundingClientRect().top - accumOffsetTop;
			accumOffsetTop += element.getBoundingClientRect().top;
		});
		return clientY - additions;
	}

	// calculate scroll left
	function calibarateScrollLeft(clientX, parents, container) {
		var initialWidth = container.offsetWidth;
		var scaledWidth = container.getBoundingClientRect().width;
		var widthDiff = scaledWidth - initialWidth;
		var scaleX = scaledWidth / initialWidth;
		scaleX = parseFloat(scaleX.toFixed(5));

		var additions = 0;
		parents.each(function (number, element) {
			if (element === container) {
				additions += element.scrollLeft + element.scrollLeft * (scaleX - 1);
			} else {
				additions += element.scrollLeft;
			}
		});
		return clientX + additions;
	}

	// calculate scroll top
	function calibarateScrollTop(clientY, parents, container) {
		var initialHeight = container.offsetHeight;
		var scaledHeight = container.getBoundingClientRect().height;
		var scaleY = scaledHeight / initialHeight;
		scaleY = parseFloat(scaleY.toFixed(5));

		var additions = 0;
		parents.each(function (number, element) {
			if (element === container) {
				additions += element.scrollTop + element.scrollTop * (scaleY - 1);
			} else {
				additions += element.scrollTop;
			}
		});
		return clientY + additions;
	}

	// calculate scale X
	function calibarateScaleX(clientX, container, calDegree, lang) {
		var initialWidth = container.offsetWidth;
		var scaledWidth = container.getBoundingClientRect().width;
		var widthDiff = scaledWidth - initialWidth;
		var scaleX = scaledWidth / initialWidth;
		scaleX = parseFloat(scaleX.toFixed(5));
		var calibaratedValue = 0;
		for (var calLevel = 0; calLevel <= calDegree; calLevel++) {
			calibaratedValue += clientX * Math.pow(1 - scaleX, calLevel);
		}

		if (lang === 'a') {
			// calibarate width
			for (var _calLevel = 0; _calLevel <= calDegree; _calLevel++) {
				calibaratedValue += widthDiff * Math.pow(1 - scaleX, _calLevel);
			}
			return calibaratedValue;
		}

		return calibaratedValue;
	}

	// calculate scale Y
	function calibarateScaleY(clientY, container, calDegree, transformOriginY) {
		var initialHeight = container.offsetHeight;
		var scaledHeight = container.getBoundingClientRect().height;
		transformOriginY = Number(transformOriginY);
		var transformOriginYCorrectionFactor = transformOriginY / (scaledHeight + transformOriginY);
		var scaleY = scaledHeight / initialHeight;
		scaleY = parseFloat(scaleY.toFixed(5));
		var calibaratedValue = 0;
		for (var calLevel = 0; calLevel <= calDegree; calLevel++) {
			calibaratedValue += clientY * Math.pow(1 - scaleY, calLevel);
		}
		for (var _calLevel2 = 1; _calLevel2 <= calDegree; _calLevel2++) {
			calibaratedValue -= transformOriginY * Math.pow(1 - scaleY, _calLevel2);
		}
		return calibaratedValue;
	}

	return {
		calibarateX: calibarateX,
		calibarateY: calibarateY
	};
}();

},{}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _calibartion = require('./calibartion.js');

var _calibartion2 = _interopRequireDefault(_calibartion);

var _functions = require('./functions.js');

var _functions2 = _interopRequireDefault(_functions);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
	putPoint: putPoint,
	startDrawing: startDrawing,
	drawLine: drawLine
};

// put a point on canvas

function putPoint(highlighter, elementX, elementY) {
	var context = highlighter.getContext();
	var radius = highlighter.getRadius();
	context.beginPath();
	context.arc(elementX, elementY, radius, 0, Math.PI * 2);
	context.fill();
}

// start paint on canvas
function startDrawing(event) {
	var parents = $(event.target).parents();
	var container = event.target.parentNode;
	var elementX = event.touches ? event.touches[0].clientX : event.pageX;
	var elementY = event.touches ? event.touches[0].clientY : event.pageY;
	var transformOriginY = $(container).css('transform-origin').split(' ')[1];
	var calibarationLevel = this.getCalibarationLevel();
	var lang = this.getLanguage();
	var context = this.getContext();
	transformOriginY = transformOriginY.replace('px', '');

	elementX = _calibartion2.default.calibarateX(elementX, parents, container, calibarationLevel, lang);
	elementY = _calibartion2.default.calibarateY(elementY, parents, container, calibarationLevel, transformOriginY);

	putPoint(this, elementX, elementY);
	context.beginPath();
	context.moveTo(elementX, elementY);
}

// draw lines on canvas
function drawLine(event) {
	var parents = $(event.target).parents();
	var container = event.target.parentNode;
	var elementX = event.touches ? event.touches[0].clientX : event.pageX;
	var elementY = event.touches ? event.touches[0].clientY : event.pageY;
	var transformOriginY = $(container).css('transform-origin').split(' ')[1];
	var calibarationLevel = this.getCalibarationLevel();
	var lang = this.getLanguage();
	var context = this.getContext();
	transformOriginY = transformOriginY.replace('px', '');

	elementX = _calibartion2.default.calibarateX(elementX, parents, container, calibarationLevel, lang);
	elementY = _calibartion2.default.calibarateY(elementY, parents, container, calibarationLevel, transformOriginY);

	context.lineTo(elementX, elementY);
	context.stroke();
	putPoint(this, elementX, elementY);
	context.beginPath();
	context.moveTo(elementX, elementY);
}

},{"./calibartion.js":1,"./functions.js":3}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = {
	getPos: getPos,
	getPosition: getPosition
};

// get position of element

function getPos(el) {
	var elements = [];
	for (var lx = 0, ly = 0; el != null; lx += el.offsetLeft, ly += el.offsetTop, el = el.offsetParent) {
		elements.push(el);
	}
	return { x: lx, y: ly, elements: elements };
}

// Helper function to get an element's exact position
function getPosition(el) {
	var xPos = 0;
	var yPos = 0;

	while (el) {
		if (el.tagName == "BODY") {
			// deal with browser quirks with body/window/document and page scroll
			var xScroll = el.scrollLeft || document.documentElement.scrollLeft;
			var yScroll = el.scrollTop || document.documentElement.scrollTop;

			xPos += el.offsetLeft - xScroll + el.clientLeft;
			yPos += el.offsetTop - yScroll + el.clientTop;
		} else {
			// for all other non-BODY elements
			xPos += el.offsetLeft - el.scrollLeft + el.clientLeft;
			yPos += el.offsetTop - el.scrollTop + el.clientTop;
		}

		el = el.offsetParent;
	}
	return {
		x: xPos,
		y: yPos
	};
}

},{}],4:[function(require,module,exports){
'use strict';

var _functions = require('./functions.js');

var _functions2 = _interopRequireDefault(_functions);

var _draw = require('./draw.js');

var _draw2 = _interopRequireDefault(_draw);

var _styledimension = require('./styledimension.js');

var _styledimension2 = _interopRequireDefault(_styledimension);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Highlighter = function ($) {

	function Highlighter(options) {
		this.options = options;
		_styledimension2.default.initCanvasOnElement(this);
	}

	Highlighter.prototype.getElement = function () {
		return document.querySelector(this.options.element);
	};

	Highlighter.prototype.getCanvasElement = function () {
		return this.options.canvasElement;
	};

	Highlighter.prototype.getCanvasContainer = function () {
		return this.options.canvasContainer;
	};

	Highlighter.prototype.getWholeContainer = function () {
		return document.querySelector(this.options.container);
	};

	Highlighter.prototype.getZIndex = function () {
		return this.options.index || '1';
	};

	Highlighter.prototype.getCalibarationLevel = function () {
		return this.options.calibarationLevel || 10;
	};

	Highlighter.prototype.getLanguage = function () {
		return this.options.lang || 'e';
	};

	Highlighter.prototype.getRadius = function () {
		return this.options.radius || 10;
	};

	Highlighter.prototype.getContext = function () {
		return this.getCanvasElement().getContext('2d');
	};

	Highlighter.prototype.getOpacity = function () {
		return this.options.opacity;
	};

	Highlighter.prototype.getColor = function () {
		return this.options.color || 'yellow';
	};

	window.Highlighter = Highlighter;

	return Highlighter;
}(jQuery);

},{"./draw.js":2,"./functions.js":3,"./styledimension.js":5}],5:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _functions = require('./functions.js');

var _functions2 = _interopRequireDefault(_functions);

var _draw = require('./draw.js');

var _draw2 = _interopRequireDefault(_draw);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function () {
	// initiate canvas on initiating highlighter object
	function initCanvasOnElement(highlighter) {

		var wholeContainer = highlighter.getWholeContainer();
		var element = highlighter.getElement();
		var canvasElement = document.createElement('canvas');
		var canvasContainer = document.createElement('div');
		wholeContainer.style.position = wholeContainer.style.position != 'absolute' ? 'relative' : 'absolute';

		// Adjust canvas container dimensions with none scaled element
		canvasContainerAdjustDimensions(highlighter, canvasContainer, element);

		// Adjust canvas dimensions
		canvasElementAdjustDimensions(canvasElement, element);

		// add highlighter
		canvasContainer.appendChild(canvasElement);
		wholeContainer.appendChild(canvasContainer);
		highlighter.options.canvasContainer = canvasContainer;
		highlighter.options.canvasElement = canvasElement;

		// bind canvas to element on scroll
		element.addEventListener('scroll', attachCanvasToElement.bind(highlighter));
		// initiate default canvas style
		initCanvasStyle(highlighter);

		// start draw on canvas
		canvasElement.addEventListener('touchstart', _draw2.default.startDrawing.bind(highlighter), false);
		//		canvasElement.addEventListener('touchmove', draw.drawLine.bind(highlighter), false);
	}

	// default canvas style
	function initCanvasStyle(highlighter) {
		var context = highlighter.getContext();
		var radius = highlighter.getRadius();
		context.lineCap = "round";
		context.lineJoin = "round";
		context.globalCompositeOperation = "source-over";
		context.strokeStyle = highlighter.getColor();
		context.fillStyle = highlighter.getColor();
		context.lineWidth = radius * 2;
	}

	// Adjust canvas container position and dimensions with none scaled element
	function canvasContainerAdjustDimensions(highlighter, canvasContainer, element) {
		var elementPositions = _functions2.default.getPosition(element);
		canvasContainer.style.width = element.getBoundingClientRect().width + 'px';
		canvasContainer.style.height = element.getBoundingClientRect().height + 'px';
		canvasContainer.style.position = 'absolute';
		canvasContainer.style.overflow = 'auto';
		canvasContainer.style.left = elementPositions.x + 'px';
		canvasContainer.style.top = elementPositions.y + 'px';
		canvasContainer.style.zIndex = highlighter.getZIndex();
		canvasContainer.style.pointerEvents = 'none';
		canvasContainer.style.opacity = highlighter.getOpacity();
		window.addEventListener("resize", adjustCanvasOnResize.bind(highlighter));
	}

	// element on resize
	function adjustCanvasOnResize() {
		var canvasContainer = this.getCanvasContainer();
		var element = this.getElement();
		var elementPositions = _functions2.default.getPosition(element);
		canvasContainer.style.left = elementPositions.x + 'px';
		canvasContainer.style.top = elementPositions.y + 'px';
	}

	// Adjust canvas element dimensions
	function canvasElementAdjustDimensions(canvasElement, element) {
		canvasElement.style.width = element.scrollWidth + 'px';
		canvasElement.width = element.scrollWidth;
		canvasElement.style.height = element.scrollHeight + 'px';
		canvasElement.height = element.scrollHeight;
	}

	//attach canvas to element
	function attachCanvasToElement(event) {
		var canvasContainer = this.getCanvasContainer();
		var element = this.getElement();
		canvasContainer.scrollTop = element.scrollTop;
		canvasContainer.scrollLeft = element.scrollLeft;
	}

	//attach element to canvas
	function attachElementToCanvas(event) {
		element.scrollTop = canvasContainer.scrollTop;
		element.scrollLeft = canvasContainer.scrollLeft;
	}

	return {
		initCanvasOnElement: initCanvasOnElement
	};
}();

},{"./draw.js":2,"./functions.js":3}]},{},[4])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmNcXGpzXFxjYWxpYmFydGlvbi5qcyIsInNyY1xcanNcXGRyYXcuanMiLCJzcmNcXGpzXFxmdW5jdGlvbnMuanMiLCJzcmNcXGpzXFxoaWdobGlnaHRlci5qcyIsInNyY1xcanNcXHN0eWxlZGltZW5zaW9uLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7O0FDQUE7a0JBQ2dCLFlBQVc7O0FBRTFCLFVBQVMsV0FBVCxDQUFxQixPQUFyQixFQUE4QixPQUE5QixFQUF1QyxlQUF2QyxFQUF3RCxpQkFBeEQsRUFBMkUsSUFBM0UsRUFBaUY7QUFDaEYsTUFBSSxXQUFXLE9BQWY7QUFDQSxhQUFXLG1CQUFtQixRQUFuQixFQUE2QixPQUE3QixDQUFYO0FBQ0EsYUFBVyxxQkFBcUIsUUFBckIsRUFBK0IsT0FBL0IsRUFBd0MsZUFBeEMsQ0FBWDtBQUNBLGFBQVcsaUJBQWlCLFFBQWpCLEVBQTJCLGVBQTNCLEVBQTRDLGlCQUE1QyxFQUErRCxJQUEvRCxDQUFYO0FBQ0EsU0FBTyxRQUFQO0FBQ0E7O0FBRUQsVUFBUyxXQUFULENBQXFCLE9BQXJCLEVBQThCLE9BQTlCLEVBQXVDLGVBQXZDLEVBQXdELGlCQUF4RCxFQUEyRSxnQkFBM0UsRUFBNkY7QUFDNUYsTUFBSSxXQUFXLE9BQWY7QUFDQSxhQUFXLG1CQUFtQixRQUFuQixFQUE2QixPQUE3QixDQUFYO0FBQ0EsYUFBVyxvQkFBb0IsUUFBcEIsRUFBOEIsT0FBOUIsRUFBdUMsZUFBdkMsQ0FBWDtBQUNBLGFBQVcsaUJBQWlCLFFBQWpCLEVBQTJCLGVBQTNCLEVBQTRDLGlCQUE1QyxFQUErRCxnQkFBL0QsQ0FBWDtBQUNBLFNBQU8sUUFBUDtBQUNBOztBQUVEO0FBQ0EsVUFBUyxrQkFBVCxDQUE0QixPQUE1QixFQUFxQyxPQUFyQyxFQUE4QztBQUM3QyxNQUFJLFlBQVksQ0FBaEI7QUFDQSxNQUFJLGtCQUFrQixDQUF0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QUFxQztBQUNwQyxNQUFJLGtCQUFrQixLQUFLLGtCQUFMLEVBQXRCO0FBQ0EsTUFBSSxVQUFVLEtBQUssVUFBTCxFQUFkO0FBQ0Esa0JBQWdCLFNBQWhCLEdBQTRCLFFBQVEsU0FBcEM7QUFDQSxrQkFBZ0IsVUFBaEIsR0FBNkIsUUFBUSxVQUFyQztBQUNBOztBQUVEO0FBQ0EsVUFBUyxxQkFBVCxDQUErQixLQUEvQixFQUFxQztBQUNwQyxVQUFRLFNBQVIsR0FBb0IsZ0JBQWdCLFNBQXBDO0FBQ0EsVUFBUSxVQUFSLEdBQXFCLGdCQUFnQixVQUFyQztBQUNBOztBQUVELFFBQU07QUFDTCx1QkFBcUI7QUFEaEIsRUFBTjtBQUlBLENBOUZlLEUiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiLy8gY2FsaWJhcmF0aW9uIGFsZ29yaXRobXMgZm9yIHggYW5kIFkgcG9zaXRpb25zIG9mIHBvaW50c1xyXG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24oKSB7XHJcblxyXG5cdGZ1bmN0aW9uIGNhbGliYXJhdGVYKGNsaWVudFgsIHBhcmVudHMsIGNhbnZhc0NvbnRhaW5lciwgY2FsaWJhcmF0aW9uTGV2ZWwsIGxhbmcpIHtcclxuXHRcdHZhciBlbGVtZW50WCA9IGNsaWVudFg7XHJcblx0XHRlbGVtZW50WCA9IGNhbGliYXJhdGVFbGVtZW50WChlbGVtZW50WCwgcGFyZW50cyk7XHJcblx0XHRlbGVtZW50WCA9IGNhbGliYXJhdGVTY3JvbGxMZWZ0KGVsZW1lbnRYLCBwYXJlbnRzLCBjYW52YXNDb250YWluZXIpO1xyXG5cdFx0ZWxlbWVudFggPSBjYWxpYmFyYXRlU2NhbGVYKGVsZW1lbnRYLCBjYW52YXNDb250YWluZXIsIGNhbGliYXJhdGlvbkxldmVsLCBsYW5nKTtcclxuXHRcdHJldHVybiBlbGVtZW50WDtcclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIGNhbGliYXJhdGVZKGNsaWVudFksIHBhcmVudHMsIGNhbnZhc0NvbnRhaW5lciwgY2FsaWJhcmF0aW9uTGV2ZWwsIHRyYW5zZm9ybU9yaWdpblkpIHtcclxuXHRcdHZhciBlbGVtZW50WSA9IGNsaWVudFk7XHJcblx0XHRlbGVtZW50WSA9IGNhbGliYXJhdGVFbGVtZW50WShlbGVtZW50WSwgcGFyZW50cyk7XHJcblx0XHRlbGVtZW50WSA9IGNhbGliYXJhdGVTY3JvbGxUb3AoZWxlbWVudFksIHBhcmVudHMsIGNhbnZhc0NvbnRhaW5lcik7XHJcblx0XHRlbGVtZW50WSA9IGNhbGliYXJhdGVTY2FsZVkoZWxlbWVudFksIGNhbnZhc0NvbnRhaW5lciwgY2FsaWJhcmF0aW9uTGV2ZWwsIHRyYW5zZm9ybU9yaWdpblkpO1xyXG5cdFx0cmV0dXJuIGVsZW1lbnRZO1xyXG5cdH1cclxuXHJcblx0Ly8gaW4gY2FzZSBvZiBhYnNvbHV0ZSBkaXZzIG9ubHkgLSBjYWxjdWxhdGUgbGVmdFxyXG5cdGZ1bmN0aW9uIGNhbGliYXJhdGVFbGVtZW50WChjbGllbnRYLCBwYXJlbnRzKSB7XHJcblx0XHR2YXIgYWRkaXRpb25zID0gMDtcclxuXHRcdGxldCBhY2N1bU9mZnNldExlZnQgPSAwO1xyXG5cdFx0cGFyZW50cyA9IHBhcmVudHMudG9BcnJheSgpLnJldmVyc2UoKTtcclxuXHRcdHBhcmVudHMuZm9yRWFjaChmdW5jdGlvbihlbGVtZW50LCBudW1iZXIpIHtcclxuXHRcdFx0YWRkaXRpb25zICs9IChlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQgLSBhY2N1bU9mZnNldExlZnQpO1xyXG5cdFx0XHRhY2N1bU9mZnNldExlZnQgKz0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0O1xyXG5cdFx0fSk7XHJcblx0XHRyZXR1cm4gY2xpZW50WCAtIGFkZGl0aW9ucztcclxuXHR9XHJcblxyXG5cdC8vIGluIGNhc2Ugb2YgYWJzb2x1dGUgZGl2cyBvbmx5IC0gY2FsY3VsYXRlIHRvcFxyXG5cdGZ1bmN0aW9uIGNhbGliYXJhdGVFbGVtZW50WShjbGllbnRZLCBwYXJlbnRzKSB7XHJcblx0XHR2YXIgYWRkaXRpb25zID0gMDtcclxuXHRcdGxldCBhY2N1bU9mZnNldFRvcCA9IDA7XHJcblx0XHRwYXJlbnRzID0gcGFyZW50cy50b0FycmF5KCkucmV2ZXJzZSgpO1xyXG5cdFx0cGFyZW50cy5mb3JFYWNoKGZ1bmN0aW9uKGVsZW1lbnQsIG51bWJlcikge1xyXG5cdFx0XHRhZGRpdGlvbnMgKz0gKGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wIC0gYWNjdW1PZmZzZXRUb3ApO1xyXG5cdFx0XHRhY2N1bU9mZnNldFRvcCArPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcDtcclxuXHRcdH0pO1xyXG5cdFx0cmV0dXJuIGNsaWVudFkgLSBhZGRpdGlvbnM7XHJcblx0fVxyXG5cclxuXHQvLyBjYWxjdWxhdGUgc2Nyb2xsIGxlZnRcclxuXHRmdW5jdGlvbiBjYWxpYmFyYXRlU2Nyb2xsTGVmdChjbGllbnRYLCBwYXJlbnRzLCBjb250YWluZXIpIHtcclxuXHRcdHZhciBpbml0aWFsV2lkdGggPSBjb250YWluZXIub2Zmc2V0V2lkdGg7XHJcblx0XHR2YXIgc2NhbGVkV2lkdGggPSBjb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGg7XHJcblx0XHR2YXIgd2lkdGhEaWZmID0gc2NhbGVkV2lkdGggLSBpbml0aWFsV2lkdGg7XHJcblx0XHR2YXIgc2NhbGVYID0gc2NhbGVkV2lkdGggLyBpbml0aWFsV2lkdGg7XHJcblx0XHRzY2FsZVggPSBwYXJzZUZsb2F0KHNjYWxlWC50b0ZpeGVkKDUpKTtcclxuXHJcblx0XHR2YXIgYWRkaXRpb25zID0gMDtcclxuXHRcdHBhcmVudHMuZWFjaChmdW5jdGlvbihudW1iZXIsIGVsZW1lbnQpIHtcclxuXHRcdFx0aWYgKGVsZW1lbnQgPT09IGNvbnRhaW5lcikge1xyXG5cdFx0XHRcdGFkZGl0aW9ucyArPSBlbGVtZW50LnNjcm9sbExlZnQgKyBlbGVtZW50LnNjcm9sbExlZnQgKiAoc2NhbGVYIC0gMSk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0YWRkaXRpb25zICs9IGVsZW1lbnQuc2Nyb2xsTGVmdDtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0XHRyZXR1cm4gY2xpZW50WCArIGFkZGl0aW9ucztcclxuXHR9XHJcblxyXG5cdC8vIGNhbGN1bGF0ZSBzY3JvbGwgdG9wXHJcblx0ZnVuY3Rpb24gY2FsaWJhcmF0ZVNjcm9sbFRvcChjbGllbnRZLCBwYXJlbnRzLCBjb250YWluZXIpIHtcclxuXHRcdHZhciBpbml0aWFsSGVpZ2h0ID0gY29udGFpbmVyLm9mZnNldEhlaWdodDtcclxuXHRcdHZhciBzY2FsZWRIZWlnaHQgPSBjb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0O1xyXG5cdFx0dmFyIHNjYWxlWSA9IHNjYWxlZEhlaWdodCAvIGluaXRpYWxIZWlnaHQ7XHJcblx0XHRzY2FsZVkgPSBwYXJzZUZsb2F0KHNjYWxlWS50b0ZpeGVkKDUpKTtcclxuXHJcblx0XHR2YXIgYWRkaXRpb25zID0gMDtcclxuXHRcdHBhcmVudHMuZWFjaChmdW5jdGlvbihudW1iZXIsIGVsZW1lbnQpIHtcclxuXHRcdFx0aWYgKGVsZW1lbnQgPT09IGNvbnRhaW5lcikge1xyXG5cdFx0XHRcdGFkZGl0aW9ucyArPSBlbGVtZW50LnNjcm9sbFRvcCArIGVsZW1lbnQuc2Nyb2xsVG9wICogKHNjYWxlWSAtIDEpO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGFkZGl0aW9ucyArPSBlbGVtZW50LnNjcm9sbFRvcDtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0XHRyZXR1cm4gY2xpZW50WSArIGFkZGl0aW9ucztcclxuXHR9XHJcblxyXG5cdC8vIGNhbGN1bGF0ZSBzY2FsZSBYXHJcblx0ZnVuY3Rpb24gY2FsaWJhcmF0ZVNjYWxlWChjbGllbnRYLCBjb250YWluZXIsIGNhbERlZ3JlZSwgbGFuZykge1xyXG5cdFx0dmFyIGluaXRpYWxXaWR0aCA9IGNvbnRhaW5lci5vZmZzZXRXaWR0aDtcclxuXHRcdHZhciBzY2FsZWRXaWR0aCA9IGNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aDtcclxuXHRcdHZhciB3aWR0aERpZmYgPSBzY2FsZWRXaWR0aCAtIGluaXRpYWxXaWR0aDtcclxuXHRcdHZhciBzY2FsZVggPSBzY2FsZWRXaWR0aCAvIGluaXRpYWxXaWR0aDtcclxuXHRcdHNjYWxlWCA9IHBhcnNlRmxvYXQoc2NhbGVYLnRvRml4ZWQoNSkpO1xyXG5cdFx0dmFyIGNhbGliYXJhdGVkVmFsdWUgPSAwO1xyXG5cdFx0Zm9yICh2YXIgY2FsTGV2ZWwgPSAwOyBjYWxMZXZlbCA8PSBjYWxEZWdyZWU7IGNhbExldmVsKyspIHtcclxuXHRcdFx0Y2FsaWJhcmF0ZWRWYWx1ZSArPSBjbGllbnRYICogTWF0aC5wb3coMSAtIHNjYWxlWCwgY2FsTGV2ZWwpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmIChsYW5nID09PSAnYScpIHtcclxuXHRcdFx0Ly8gY2FsaWJhcmF0ZSB3aWR0aFxyXG5cdFx0XHRmb3IgKHZhciBfY2FsTGV2ZWwgPSAwOyBfY2FsTGV2ZWwgPD0gY2FsRGVncmVlOyBfY2FsTGV2ZWwrKykge1xyXG5cdFx0XHRcdGNhbGliYXJhdGVkVmFsdWUgKz0gd2lkdGhEaWZmICogTWF0aC5wb3coMSAtIHNjYWxlWCwgX2NhbExldmVsKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gY2FsaWJhcmF0ZWRWYWx1ZTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gY2FsaWJhcmF0ZWRWYWx1ZTtcclxuXHR9XHJcblxyXG5cdC8vIGNhbGN1bGF0ZSBzY2FsZSBZXHJcblx0ZnVuY3Rpb24gY2FsaWJhcmF0ZVNjYWxlWShjbGllbnRZLCBjb250YWluZXIsIGNhbERlZ3JlZSwgdHJhbnNmb3JtT3JpZ2luWSkge1xyXG5cdFx0dmFyIGluaXRpYWxIZWlnaHQgPSBjb250YWluZXIub2Zmc2V0SGVpZ2h0O1xyXG5cdFx0dmFyIHNjYWxlZEhlaWdodCA9IGNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQ7XHJcblx0XHR0cmFuc2Zvcm1PcmlnaW5ZID0gTnVtYmVyKHRyYW5zZm9ybU9yaWdpblkpO1xyXG5cdFx0dmFyIHRyYW5zZm9ybU9yaWdpbllDb3JyZWN0aW9uRmFjdG9yID0gdHJhbnNmb3JtT3JpZ2luWSAvIChzY2FsZWRIZWlnaHQgKyB0cmFuc2Zvcm1PcmlnaW5ZKTtcclxuXHRcdHZhciBzY2FsZVkgPSBzY2FsZWRIZWlnaHQgLyBpbml0aWFsSGVpZ2h0O1xyXG5cdFx0c2NhbGVZID0gcGFyc2VGbG9hdChzY2FsZVkudG9GaXhlZCg1KSk7XHJcblx0XHR2YXIgY2FsaWJhcmF0ZWRWYWx1ZSA9IDA7XHJcblx0XHRmb3IgKHZhciBjYWxMZXZlbCA9IDA7IGNhbExldmVsIDw9IGNhbERlZ3JlZTsgY2FsTGV2ZWwrKykge1xyXG5cdFx0XHRjYWxpYmFyYXRlZFZhbHVlICs9IGNsaWVudFkgKiBNYXRoLnBvdygxIC0gc2NhbGVZLCBjYWxMZXZlbCk7XHJcblx0XHR9XHJcblx0XHRmb3IgKHZhciBfY2FsTGV2ZWwyID0gMTsgX2NhbExldmVsMiA8PSBjYWxEZWdyZWU7IF9jYWxMZXZlbDIrKykge1xyXG5cdFx0XHRjYWxpYmFyYXRlZFZhbHVlIC09IHRyYW5zZm9ybU9yaWdpblkgKiBNYXRoLnBvdygxIC0gc2NhbGVZLCBfY2FsTGV2ZWwyKTtcclxuXHRcdH1cclxuXHRcdHJldHVybiBjYWxpYmFyYXRlZFZhbHVlO1xyXG5cdH1cclxuXHJcblx0cmV0dXJuIHtcclxuXHRcdGNhbGliYXJhdGVYOiBjYWxpYmFyYXRlWCxcclxuXHRcdGNhbGliYXJhdGVZOiBjYWxpYmFyYXRlWVxyXG5cdH1cclxuXHJcbn0oKSk7XHJcbiIsImltcG9ydCBjYWxpYmFydGlvbiBmcm9tICcuL2NhbGliYXJ0aW9uLmpzJztcclxuaW1wb3J0IGZ1bmN0aW9ucyBmcm9tICcuL2Z1bmN0aW9ucy5qcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcblx0cHV0UG9pbnQ6IHB1dFBvaW50LFxyXG5cdHN0YXJ0RHJhd2luZzogc3RhcnREcmF3aW5nLFxyXG5cdGRyYXdMaW5lOiBkcmF3TGluZVxyXG59XHJcblxyXG4vLyBwdXQgYSBwb2ludCBvbiBjYW52YXNcclxuZnVuY3Rpb24gcHV0UG9pbnQoaGlnaGxpZ2h0ZXIsIGVsZW1lbnRYLCBlbGVtZW50WSkge1xyXG5cdHZhciBjb250ZXh0ID0gaGlnaGxpZ2h0ZXIuZ2V0Q29udGV4dCgpO1xyXG5cdHZhciByYWRpdXMgPSBoaWdobGlnaHRlci5nZXRSYWRpdXMoKTtcclxuXHRjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG5cdGNvbnRleHQuYXJjKGVsZW1lbnRYLCBlbGVtZW50WSwgcmFkaXVzLCAwLCBNYXRoLlBJICogMik7XHJcblx0Y29udGV4dC5maWxsKCk7XHJcbn1cclxuXHJcbi8vIHN0YXJ0IHBhaW50IG9uIGNhbnZhc1xyXG5mdW5jdGlvbiBzdGFydERyYXdpbmcoZXZlbnQpIHtcclxuXHR2YXIgcGFyZW50cyA9ICQoZXZlbnQudGFyZ2V0KS5wYXJlbnRzKCk7XHJcblx0dmFyIGNvbnRhaW5lciA9IGV2ZW50LnRhcmdldC5wYXJlbnROb2RlO1xyXG5cdHZhciBlbGVtZW50WCA9IGV2ZW50LnRvdWNoZXMgPyBldmVudC50b3VjaGVzWzBdLmNsaWVudFggOiBldmVudC5wYWdlWDtcclxuXHR2YXIgZWxlbWVudFkgPSBldmVudC50b3VjaGVzID8gZXZlbnQudG91Y2hlc1swXS5jbGllbnRZIDogZXZlbnQucGFnZVk7XHJcblx0dmFyIHRyYW5zZm9ybU9yaWdpblkgPSAkKGNvbnRhaW5lcikuY3NzKCd0cmFuc2Zvcm0tb3JpZ2luJykuc3BsaXQoJyAnKVsxXTtcclxuXHR2YXIgY2FsaWJhcmF0aW9uTGV2ZWwgPSB0aGlzLmdldENhbGliYXJhdGlvbkxldmVsKCk7XHJcblx0dmFyIGxhbmcgPSB0aGlzLmdldExhbmd1YWdlKCk7XHJcblx0dmFyIGNvbnRleHQgPSB0aGlzLmdldENvbnRleHQoKTtcclxuXHR0cmFuc2Zvcm1PcmlnaW5ZID0gdHJhbnNmb3JtT3JpZ2luWS5yZXBsYWNlKCdweCcsICcnKTtcclxuXHJcblx0ZWxlbWVudFggPSBjYWxpYmFydGlvbi5jYWxpYmFyYXRlWChlbGVtZW50WCwgcGFyZW50cywgY29udGFpbmVyLCBjYWxpYmFyYXRpb25MZXZlbCwgbGFuZyk7XHJcblx0ZWxlbWVudFkgPSBjYWxpYmFydGlvbi5jYWxpYmFyYXRlWShlbGVtZW50WSwgcGFyZW50cywgY29udGFpbmVyLCBjYWxpYmFyYXRpb25MZXZlbCwgdHJhbnNmb3JtT3JpZ2luWSk7XHJcblxyXG5cdHB1dFBvaW50KHRoaXMsIGVsZW1lbnRYLCBlbGVtZW50WSk7XHJcblx0Y29udGV4dC5iZWdpblBhdGgoKTtcclxuXHRjb250ZXh0Lm1vdmVUbyhlbGVtZW50WCwgZWxlbWVudFkpO1xyXG59XHJcblxyXG4vLyBkcmF3IGxpbmVzIG9uIGNhbnZhc1xyXG5mdW5jdGlvbiBkcmF3TGluZShldmVudCkge1xyXG5cdHZhciBwYXJlbnRzID0gJChldmVudC50YXJnZXQpLnBhcmVudHMoKTtcclxuXHR2YXIgY29udGFpbmVyID0gZXZlbnQudGFyZ2V0LnBhcmVudE5vZGU7XHJcblx0dmFyIGVsZW1lbnRYID0gZXZlbnQudG91Y2hlcyA/IGV2ZW50LnRvdWNoZXNbMF0uY2xpZW50WCA6IGV2ZW50LnBhZ2VYO1xyXG5cdHZhciBlbGVtZW50WSA9IGV2ZW50LnRvdWNoZXMgPyBldmVudC50b3VjaGVzWzBdLmNsaWVudFkgOiBldmVudC5wYWdlWTtcclxuXHR2YXIgdHJhbnNmb3JtT3JpZ2luWSA9ICQoY29udGFpbmVyKS5jc3MoJ3RyYW5zZm9ybS1vcmlnaW4nKS5zcGxpdCgnICcpWzFdO1xyXG5cdHZhciBjYWxpYmFyYXRpb25MZXZlbCA9IHRoaXMuZ2V0Q2FsaWJhcmF0aW9uTGV2ZWwoKTtcclxuXHR2YXIgbGFuZyA9IHRoaXMuZ2V0TGFuZ3VhZ2UoKTtcclxuXHR2YXIgY29udGV4dCA9IHRoaXMuZ2V0Q29udGV4dCgpO1xyXG5cdHRyYW5zZm9ybU9yaWdpblkgPSB0cmFuc2Zvcm1PcmlnaW5ZLnJlcGxhY2UoJ3B4JywgJycpO1xyXG5cclxuXHRlbGVtZW50WCA9IGNhbGliYXJ0aW9uLmNhbGliYXJhdGVYKGVsZW1lbnRYLCBwYXJlbnRzLCBjb250YWluZXIsIGNhbGliYXJhdGlvbkxldmVsLCBsYW5nKTtcclxuXHRlbGVtZW50WSA9IGNhbGliYXJ0aW9uLmNhbGliYXJhdGVZKGVsZW1lbnRZLCBwYXJlbnRzLCBjb250YWluZXIsIGNhbGliYXJhdGlvbkxldmVsLCB0cmFuc2Zvcm1PcmlnaW5ZKTtcclxuXHJcblx0Y29udGV4dC5saW5lVG8oZWxlbWVudFgsIGVsZW1lbnRZKTtcclxuXHRjb250ZXh0LnN0cm9rZSgpO1xyXG5cdHB1dFBvaW50KHRoaXMsIGVsZW1lbnRYLCBlbGVtZW50WSk7XHJcblx0Y29udGV4dC5iZWdpblBhdGgoKTtcclxuXHRjb250ZXh0Lm1vdmVUbyhlbGVtZW50WCwgZWxlbWVudFkpO1xyXG59IiwiZXhwb3J0IGRlZmF1bHQge1xyXG5cdGdldFBvczogZ2V0UG9zLFxyXG5cdGdldFBvc2l0aW9uOiBnZXRQb3NpdGlvblxyXG59XHJcblxyXG4vLyBnZXQgcG9zaXRpb24gb2YgZWxlbWVudFxyXG5mdW5jdGlvbiBnZXRQb3MoZWwpIHtcclxuXHRsZXQgZWxlbWVudHMgPSBbXTtcclxuXHRmb3IgKHZhciBseCA9IDAsIGx5ID0gMDsgZWwgIT0gbnVsbDsgbHggKz0gZWwub2Zmc2V0TGVmdCwgbHkgKz0gZWwub2Zmc2V0VG9wLCBlbCA9IGVsLm9mZnNldFBhcmVudCl7XHJcblx0XHRlbGVtZW50cy5wdXNoKGVsKTtcclxuXHR9XHJcblx0cmV0dXJuIHsgeDogbHgsIHk6IGx5LCBlbGVtZW50czogZWxlbWVudHMgfTtcclxufVxyXG5cclxuXHJcbi8vIEhlbHBlciBmdW5jdGlvbiB0byBnZXQgYW4gZWxlbWVudCdzIGV4YWN0IHBvc2l0aW9uXHJcbmZ1bmN0aW9uIGdldFBvc2l0aW9uKGVsKSB7XHJcblx0dmFyIHhQb3MgPSAwO1xyXG5cdHZhciB5UG9zID0gMDtcclxuXHJcblx0d2hpbGUgKGVsKSB7XHJcblx0XHRpZiAoZWwudGFnTmFtZSA9PSBcIkJPRFlcIikge1xyXG5cdFx0XHQvLyBkZWFsIHdpdGggYnJvd3NlciBxdWlya3Mgd2l0aCBib2R5L3dpbmRvdy9kb2N1bWVudCBhbmQgcGFnZSBzY3JvbGxcclxuXHRcdFx0dmFyIHhTY3JvbGwgPSBlbC5zY3JvbGxMZWZ0IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxMZWZ0O1xyXG5cdFx0XHR2YXIgeVNjcm9sbCA9IGVsLnNjcm9sbFRvcCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wO1xyXG5cclxuXHRcdFx0eFBvcyArPSAoZWwub2Zmc2V0TGVmdCAtIHhTY3JvbGwgKyBlbC5jbGllbnRMZWZ0KTtcclxuXHRcdFx0eVBvcyArPSAoZWwub2Zmc2V0VG9wIC0geVNjcm9sbCArIGVsLmNsaWVudFRvcCk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHQvLyBmb3IgYWxsIG90aGVyIG5vbi1CT0RZIGVsZW1lbnRzXHJcblx0XHRcdHhQb3MgKz0gKGVsLm9mZnNldExlZnQgLSBlbC5zY3JvbGxMZWZ0ICsgZWwuY2xpZW50TGVmdCk7XHJcblx0XHRcdHlQb3MgKz0gKGVsLm9mZnNldFRvcCAtIGVsLnNjcm9sbFRvcCArIGVsLmNsaWVudFRvcCk7XHJcblx0XHR9XHJcblxyXG5cdFx0ZWwgPSBlbC5vZmZzZXRQYXJlbnQ7XHJcblx0fVxyXG5cdHJldHVybiB7XHJcblx0XHR4OiB4UG9zLFxyXG5cdFx0eTogeVBvc1xyXG5cdH07XHJcbn1cclxuIiwiaW1wb3J0IGZ1bmN0aW9ucyBmcm9tICcuL2Z1bmN0aW9ucy5qcyc7XHJcbmltcG9ydCBkcmF3IGZyb20gJy4vZHJhdy5qcyc7XHJcbmltcG9ydCBzdHlsZWRpbWVuc2lvbiBmcm9tICcuL3N0eWxlZGltZW5zaW9uLmpzJztcclxuXHJcbnZhciBIaWdobGlnaHRlciA9IChmdW5jdGlvbigkKSB7XHJcblxyXG5cdGZ1bmN0aW9uIEhpZ2hsaWdodGVyKG9wdGlvbnMpIHtcclxuXHRcdHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XHJcblx0XHRzdHlsZWRpbWVuc2lvbi5pbml0Q2FudmFzT25FbGVtZW50KHRoaXMpO1xyXG5cdH1cclxuXHJcblx0SGlnaGxpZ2h0ZXIucHJvdG90eXBlLmdldEVsZW1lbnQgPSBmdW5jdGlvbigpIHtcclxuXHRcdHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRoaXMub3B0aW9ucy5lbGVtZW50KTtcclxuXHR9O1xyXG5cclxuXHRIaWdobGlnaHRlci5wcm90b3R5cGUuZ2V0Q2FudmFzRWxlbWVudCA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMub3B0aW9ucy5jYW52YXNFbGVtZW50O1xyXG5cdH07XHJcblxyXG5cdEhpZ2hsaWdodGVyLnByb3RvdHlwZS5nZXRDYW52YXNDb250YWluZXIgPSBmdW5jdGlvbigpIHtcclxuXHRcdHJldHVybiB0aGlzLm9wdGlvbnMuY2FudmFzQ29udGFpbmVyO1xyXG5cdH07XHJcblxyXG5cdEhpZ2hsaWdodGVyLnByb3RvdHlwZS5nZXRXaG9sZUNvbnRhaW5lciA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0cmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGhpcy5vcHRpb25zLmNvbnRhaW5lcik7XHJcblx0fTtcclxuXHJcblx0SGlnaGxpZ2h0ZXIucHJvdG90eXBlLmdldFpJbmRleCA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMub3B0aW9ucy5pbmRleCB8fCAnMSc7XHJcblx0fTtcclxuXHJcblx0SGlnaGxpZ2h0ZXIucHJvdG90eXBlLmdldENhbGliYXJhdGlvbkxldmVsID0gZnVuY3Rpb24oKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5vcHRpb25zLmNhbGliYXJhdGlvbkxldmVsIHx8IDEwO1xyXG5cdH07XHJcblxyXG5cdEhpZ2hsaWdodGVyLnByb3RvdHlwZS5nZXRMYW5ndWFnZSA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMub3B0aW9ucy5sYW5nIHx8ICdlJztcclxuXHR9O1xyXG5cclxuXHRIaWdobGlnaHRlci5wcm90b3R5cGUuZ2V0UmFkaXVzID0gZnVuY3Rpb24oKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5vcHRpb25zLnJhZGl1cyB8fCAxMDtcclxuXHR9O1xyXG5cclxuXHRIaWdobGlnaHRlci5wcm90b3R5cGUuZ2V0Q29udGV4dCA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMuZ2V0Q2FudmFzRWxlbWVudCgpLmdldENvbnRleHQoJzJkJyk7XHJcblx0fTtcclxuXHJcblx0SGlnaGxpZ2h0ZXIucHJvdG90eXBlLmdldE9wYWNpdHkgPSBmdW5jdGlvbigpIHtcclxuXHRcdHJldHVybiB0aGlzLm9wdGlvbnMub3BhY2l0eTtcclxuXHR9O1xyXG5cclxuXHRIaWdobGlnaHRlci5wcm90b3R5cGUuZ2V0Q29sb3IgPSBmdW5jdGlvbigpIHtcclxuXHRcdHJldHVybiB0aGlzLm9wdGlvbnMuY29sb3IgfHwgJ3llbGxvdyc7XHJcblx0fTtcclxuXHJcblx0d2luZG93LkhpZ2hsaWdodGVyID0gSGlnaGxpZ2h0ZXI7XHJcblxyXG5cdHJldHVybiBIaWdobGlnaHRlcjtcclxuXHJcbn0pKGpRdWVyeSk7IiwiaW1wb3J0IGZ1bmN0aW9ucyBmcm9tICcuL2Z1bmN0aW9ucy5qcyc7XHJcbmltcG9ydCBkcmF3IGZyb20gJy4vZHJhdy5qcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24oKSB7XHJcblx0Ly8gaW5pdGlhdGUgY2FudmFzIG9uIGluaXRpYXRpbmcgaGlnaGxpZ2h0ZXIgb2JqZWN0XHJcblx0ZnVuY3Rpb24gaW5pdENhbnZhc09uRWxlbWVudChoaWdobGlnaHRlcikge1xyXG5cclxuXHRcdGxldCB3aG9sZUNvbnRhaW5lciA9IGhpZ2hsaWdodGVyLmdldFdob2xlQ29udGFpbmVyKCk7XHJcblx0XHRsZXQgZWxlbWVudCA9IGhpZ2hsaWdodGVyLmdldEVsZW1lbnQoKTtcclxuXHRcdGxldCBjYW52YXNFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XHJcblx0XHRsZXQgY2FudmFzQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcblx0XHR3aG9sZUNvbnRhaW5lci5zdHlsZS5wb3NpdGlvbiA9IHdob2xlQ29udGFpbmVyLnN0eWxlLnBvc2l0aW9uICE9ICdhYnNvbHV0ZScgPyAncmVsYXRpdmUnIDogJ2Fic29sdXRlJztcclxuXHJcblx0XHQvLyBBZGp1c3QgY2FudmFzIGNvbnRhaW5lciBkaW1lbnNpb25zIHdpdGggbm9uZSBzY2FsZWQgZWxlbWVudFxyXG5cdFx0Y2FudmFzQ29udGFpbmVyQWRqdXN0RGltZW5zaW9ucyhoaWdobGlnaHRlciwgY2FudmFzQ29udGFpbmVyLCBlbGVtZW50KTtcclxuXHJcblx0XHQvLyBBZGp1c3QgY2FudmFzIGRpbWVuc2lvbnNcclxuXHRcdGNhbnZhc0VsZW1lbnRBZGp1c3REaW1lbnNpb25zKGNhbnZhc0VsZW1lbnQsIGVsZW1lbnQpO1xyXG5cclxuXHRcdC8vIGFkZCBoaWdobGlnaHRlclxyXG5cdFx0Y2FudmFzQ29udGFpbmVyLmFwcGVuZENoaWxkKGNhbnZhc0VsZW1lbnQpO1xyXG5cdFx0d2hvbGVDb250YWluZXIuYXBwZW5kQ2hpbGQoY2FudmFzQ29udGFpbmVyKTtcclxuXHRcdGhpZ2hsaWdodGVyLm9wdGlvbnMuY2FudmFzQ29udGFpbmVyID0gY2FudmFzQ29udGFpbmVyO1xyXG5cdFx0aGlnaGxpZ2h0ZXIub3B0aW9ucy5jYW52YXNFbGVtZW50ID0gY2FudmFzRWxlbWVudDtcclxuXHJcblx0XHQvLyBiaW5kIGNhbnZhcyB0byBlbGVtZW50IG9uIHNjcm9sbFxyXG5cdFx0ZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBhdHRhY2hDYW52YXNUb0VsZW1lbnQuYmluZChoaWdobGlnaHRlcikpO1xyXG5cdFx0Ly8gaW5pdGlhdGUgZGVmYXVsdCBjYW52YXMgc3R5bGVcclxuXHRcdGluaXRDYW52YXNTdHlsZShoaWdobGlnaHRlcik7XHJcblxyXG5cdFx0Ly8gc3RhcnQgZHJhdyBvbiBjYW52YXNcclxuXHRcdGNhbnZhc0VsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIGRyYXcuc3RhcnREcmF3aW5nLmJpbmQoaGlnaGxpZ2h0ZXIpLCBmYWxzZSk7XHJcbi8vXHRcdGNhbnZhc0VsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgZHJhdy5kcmF3TGluZS5iaW5kKGhpZ2hsaWdodGVyKSwgZmFsc2UpO1xyXG5cdH1cclxuXHJcblx0Ly8gZGVmYXVsdCBjYW52YXMgc3R5bGVcclxuXHRmdW5jdGlvbiBpbml0Q2FudmFzU3R5bGUoaGlnaGxpZ2h0ZXIpe1xyXG5cdFx0bGV0IGNvbnRleHQgPSBoaWdobGlnaHRlci5nZXRDb250ZXh0KCk7XHJcblx0XHRsZXQgcmFkaXVzID0gaGlnaGxpZ2h0ZXIuZ2V0UmFkaXVzKCk7XHJcblx0XHRjb250ZXh0LmxpbmVDYXAgPSBcInJvdW5kXCI7XHJcblx0XHRjb250ZXh0LmxpbmVKb2luID0gXCJyb3VuZFwiO1xyXG5cdFx0Y29udGV4dC5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb24gPSBcInNvdXJjZS1vdmVyXCI7XHJcblx0XHRjb250ZXh0LnN0cm9rZVN0eWxlID0gaGlnaGxpZ2h0ZXIuZ2V0Q29sb3IoKTtcclxuXHRcdGNvbnRleHQuZmlsbFN0eWxlID0gaGlnaGxpZ2h0ZXIuZ2V0Q29sb3IoKTtcclxuXHRcdGNvbnRleHQubGluZVdpZHRoID0gcmFkaXVzICogMjtcclxuXHR9XHJcblxyXG5cdC8vIEFkanVzdCBjYW52YXMgY29udGFpbmVyIHBvc2l0aW9uIGFuZCBkaW1lbnNpb25zIHdpdGggbm9uZSBzY2FsZWQgZWxlbWVudFxyXG5cdGZ1bmN0aW9uIGNhbnZhc0NvbnRhaW5lckFkanVzdERpbWVuc2lvbnMoaGlnaGxpZ2h0ZXIsIGNhbnZhc0NvbnRhaW5lciwgZWxlbWVudCkge1xyXG5cdFx0bGV0IGVsZW1lbnRQb3NpdGlvbnMgPSBmdW5jdGlvbnMuZ2V0UG9zaXRpb24oZWxlbWVudCk7XHJcblx0XHRjYW52YXNDb250YWluZXIuc3R5bGUud2lkdGggPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoICsgJ3B4JztcclxuXHRcdGNhbnZhc0NvbnRhaW5lci5zdHlsZS5oZWlnaHQgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodCArICdweCc7XHJcblx0XHRjYW52YXNDb250YWluZXIuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xyXG5cdFx0Y2FudmFzQ29udGFpbmVyLnN0eWxlLm92ZXJmbG93ID0gJ2F1dG8nO1xyXG5cdFx0Y2FudmFzQ29udGFpbmVyLnN0eWxlLmxlZnQgPSBlbGVtZW50UG9zaXRpb25zLnggKyAncHgnO1xyXG5cdFx0Y2FudmFzQ29udGFpbmVyLnN0eWxlLnRvcCA9IGVsZW1lbnRQb3NpdGlvbnMueSArICdweCc7XHJcblx0XHRjYW52YXNDb250YWluZXIuc3R5bGUuekluZGV4ID0gaGlnaGxpZ2h0ZXIuZ2V0WkluZGV4KCk7XHJcblx0XHRjYW52YXNDb250YWluZXIuc3R5bGUucG9pbnRlckV2ZW50cyA9ICdub25lJztcclxuXHRcdGNhbnZhc0NvbnRhaW5lci5zdHlsZS5vcGFjaXR5ID0gaGlnaGxpZ2h0ZXIuZ2V0T3BhY2l0eSgpO1xyXG5cdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgYWRqdXN0Q2FudmFzT25SZXNpemUuYmluZChoaWdobGlnaHRlcikpO1xyXG5cdH1cclxuXHJcblx0Ly8gZWxlbWVudCBvbiByZXNpemVcclxuXHRmdW5jdGlvbiBhZGp1c3RDYW52YXNPblJlc2l6ZSgpe1xyXG5cdFx0bGV0IGNhbnZhc0NvbnRhaW5lciA9IHRoaXMuZ2V0Q2FudmFzQ29udGFpbmVyKCk7XHJcblx0XHRsZXQgZWxlbWVudCA9IHRoaXMuZ2V0RWxlbWVudCgpO1xyXG5cdFx0bGV0IGVsZW1lbnRQb3NpdGlvbnMgPSBmdW5jdGlvbnMuZ2V0UG9zaXRpb24oZWxlbWVudCk7XHJcblx0XHRjYW52YXNDb250YWluZXIuc3R5bGUubGVmdCA9IGVsZW1lbnRQb3NpdGlvbnMueCArICdweCc7XHJcblx0XHRjYW52YXNDb250YWluZXIuc3R5bGUudG9wID0gZWxlbWVudFBvc2l0aW9ucy55ICsgJ3B4JztcclxuXHR9XHJcblxyXG5cdC8vIEFkanVzdCBjYW52YXMgZWxlbWVudCBkaW1lbnNpb25zXHJcblx0ZnVuY3Rpb24gY2FudmFzRWxlbWVudEFkanVzdERpbWVuc2lvbnMoY2FudmFzRWxlbWVudCwgZWxlbWVudCkge1xyXG5cdFx0Y2FudmFzRWxlbWVudC5zdHlsZS53aWR0aCA9IGVsZW1lbnQuc2Nyb2xsV2lkdGggKyAncHgnO1xyXG5cdFx0Y2FudmFzRWxlbWVudC53aWR0aCA9IGVsZW1lbnQuc2Nyb2xsV2lkdGg7XHJcblx0XHRjYW52YXNFbGVtZW50LnN0eWxlLmhlaWdodCA9IGVsZW1lbnQuc2Nyb2xsSGVpZ2h0ICsgJ3B4JztcclxuXHRcdGNhbnZhc0VsZW1lbnQuaGVpZ2h0ID0gZWxlbWVudC5zY3JvbGxIZWlnaHQ7XHJcblx0fVxyXG5cclxuXHQvL2F0dGFjaCBjYW52YXMgdG8gZWxlbWVudFxyXG5cdGZ1bmN0aW9uIGF0dGFjaENhbnZhc1RvRWxlbWVudChldmVudCl7XHJcblx0XHRsZXQgY2FudmFzQ29udGFpbmVyID0gdGhpcy5nZXRDYW52YXNDb250YWluZXIoKTtcclxuXHRcdGxldCBlbGVtZW50ID0gdGhpcy5nZXRFbGVtZW50KCk7XHJcblx0XHRjYW52YXNDb250YWluZXIuc2Nyb2xsVG9wID0gZWxlbWVudC5zY3JvbGxUb3A7XHJcblx0XHRjYW52YXNDb250YWluZXIuc2Nyb2xsTGVmdCA9IGVsZW1lbnQuc2Nyb2xsTGVmdDtcclxuXHR9XHJcblxyXG5cdC8vYXR0YWNoIGVsZW1lbnQgdG8gY2FudmFzXHJcblx0ZnVuY3Rpb24gYXR0YWNoRWxlbWVudFRvQ2FudmFzKGV2ZW50KXtcclxuXHRcdGVsZW1lbnQuc2Nyb2xsVG9wID0gY2FudmFzQ29udGFpbmVyLnNjcm9sbFRvcDtcclxuXHRcdGVsZW1lbnQuc2Nyb2xsTGVmdCA9IGNhbnZhc0NvbnRhaW5lci5zY3JvbGxMZWZ0O1xyXG5cdH1cclxuXHJcblx0cmV0dXJue1xyXG5cdFx0aW5pdENhbnZhc09uRWxlbWVudDogaW5pdENhbnZhc09uRWxlbWVudFxyXG5cdH1cclxuXHJcbn0oKSk7Il19
