(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _initiation = require('./structure/initiation.js');

var _initiation2 = _interopRequireDefault(_initiation);

var _highlighteractivation = require('./structure/highlighteractivation.js');

var _highlighteractivation2 = _interopRequireDefault(_highlighteractivation);

var _drawstyles = require('./structure/drawstyles.js');

var _drawstyles2 = _interopRequireDefault(_drawstyles);

var _saveload = require('./structure/saveload.js');

var _saveload2 = _interopRequireDefault(_saveload);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Highlighter = function () {
	function Highlighter(options) {
		_classCallCheck(this, Highlighter);

		this.options = options;
		this.imageData = '';
		_initiation2.default.initCanvasOnElement(this);
	}

	_createClass(Highlighter, [{
		key: 'getElement',
		value: function getElement() {
			var element = document.querySelector('#' + this.options.element);
			if (!this.options.element || !element) {
				throw 'element id not detected';
			}
			return element;
		}
	}, {
		key: 'getCanvasElement',
		value: function getCanvasElement() {
			return this.options.canvasElement;
		}
	}, {
		key: 'getCanvasContainer',
		value: function getCanvasContainer() {
			return this.options.canvasContainer;
		}
	}, {
		key: 'getCanvasContainerDimensions',
		value: function getCanvasContainerDimensions() {
			return this.options.canvasContainerDimensions;
		}
	}, {
		key: 'getWholeContainer',
		value: function getWholeContainer() {
			return this.options.container ? document.querySelector(this.options.container) : document.querySelector('body');
		}
	}, {
		key: 'getZIndex',
		value: function getZIndex() {
			return this.options.zIndex || '1';
		}
	}, {
		key: 'getCalibarationLevel',
		value: function getCalibarationLevel() {
			return this.options.calibarationLevel || 10;
		}
	}, {
		key: 'getLanguage',
		value: function getLanguage() {
			return this.options.lang || 'e';
		}
	}, {
		key: 'getRadius',
		value: function getRadius() {
			return this.options.radius || 10;
		}
	}, {
		key: 'getContext',
		value: function getContext() {
			return this.getCanvasElement().getContext('2d');
		}
	}, {
		key: 'getOpacity',
		value: function getOpacity() {
			return this.options.opacity;
		}
	}, {
		key: 'getColor',
		value: function getColor() {
			return this.options.color || 'yellow';
		}
	}, {
		key: 'activateHighlighter',
		value: function activateHighlighter() {
			_highlighteractivation2.default.activate(this);
		}
	}, {
		key: 'deactivateHighlighter',
		value: function deactivateHighlighter() {
			_highlighteractivation2.default.deactivate(this);
		}
	}, {
		key: 'startMarker',
		value: function startMarker() {
			_drawstyles2.default.initMarkStyle(this);
		}
	}, {
		key: 'startEraser',
		value: function startEraser() {
			_drawstyles2.default.initEraseStyle(this);
		}
	}, {
		key: 'saveImage',
		value: function saveImage() {
			_saveload2.default.save(this);
		}
	}, {
		key: 'loadImage',
		value: function loadImage() {
			_saveload2.default.load(this);
		}
	}]);

	return Highlighter;
}();

window.Highlighter = Highlighter;

},{"./structure/drawstyles.js":5,"./structure/highlighteractivation.js":7,"./structure/initiation.js":8,"./structure/saveload.js":9}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

// calibaration algorithms for x and Y positions of points
exports.default = function () {

	function calibarateX(clientX, parents, canvasContainer, calibarationLevel, lang) {
		var elementX = clientX;
		elementX = calibarateElementX(elementX, parents);
		elementX = calibarateScrollLeft(elementX, parents, canvasContainer);
		elementX = calibarateScaleX(elementX, canvasContainer, calibarationLevel, lang);
		return elementX;
	}

	function calibarateY(clientY, parents, canvasContainer, calibarationLevel, transformOriginY) {
		var elementY = clientY;
		elementY = calibarateElementY(elementY, parents);
		elementY = calibarateScrollTop(elementY, parents, canvasContainer);
		elementY = calibarateScaleY(elementY, canvasContainer, calibarationLevel, transformOriginY);
		return elementY;
	}

	// in case of absolute divs only - calculate left
	function calibarateElementX(clientX, parents) {
		var additions = 0;
		var accumOffsetLeft = 0;
		parents = parents.toArray().reverse();
		parents.forEach(function (element, number) {
			additions += element.getBoundingClientRect().left - accumOffsetLeft;
			accumOffsetLeft += element.getBoundingClientRect().left;
		});
		return clientX - additions;
	}

	// in case of absolute divs only - calculate top
	function calibarateElementY(clientY, parents) {
		var additions = 0;
		var accumOffsetTop = 0;
		parents = parents.toArray().reverse();
		parents.forEach(function (element, number) {
			additions += element.getBoundingClientRect().top - accumOffsetTop;
			accumOffsetTop += element.getBoundingClientRect().top;
		});
		return clientY - additions;
	}

	// calculate scroll left
	function calibarateScrollLeft(clientX, parents, container) {
		var initialWidth = container.offsetWidth;
		var scaledWidth = container.getBoundingClientRect().width;
		var widthDiff = scaledWidth - initialWidth;
		var scaleX = scaledWidth / initialWidth;
		scaleX = parseFloat(scaleX.toFixed(5));

		var additions = 0;
		parents.each(function (number, element) {
			if (element === container) {
				additions += element.scrollLeft + element.scrollLeft * (scaleX - 1);
			} else {
				additions += element.scrollLeft;
			}
		});
		return clientX + additions;
	}

	// calculate scroll top
	function calibarateScrollTop(clientY, parents, container) {
		var initialHeight = container.offsetHeight;
		var scaledHeight = container.getBoundingClientRect().height;
		var scaleY = scaledHeight / initialHeight;
		scaleY = parseFloat(scaleY.toFixed(5));

		var additions = 0;
		parents.each(function (number, element) {
			if (element === container) {
				additions += element.scrollTop + element.scrollTop * (scaleY - 1);
			} else {
				additions += element.scrollTop;
			}
		});
		return clientY + additions;
	}

	// calculate scale X
	function calibarateScaleX(clientX, container, calDegree, lang) {
		var initialWidth = container.offsetWidth;
		var scaledWidth = container.getBoundingClientRect().width;
		var widthDiff = scaledWidth - initialWidth;
		var scaleX = scaledWidth / initialWidth;
		scaleX = parseFloat(scaleX.toFixed(5));
		var calibaratedValue = 0;
		for (var calLevel = 0; calLevel <= calDegree; calLevel++) {
			calibaratedValue += clientX * Math.pow(1 - scaleX, calLevel);
		}

		if (lang === 'a') {
			// calibarate width
			for (var _calLevel = 0; _calLevel <= calDegree; _calLevel++) {
				calibaratedValue += widthDiff * Math.pow(1 - scaleX, _calLevel);
			}
			return calibaratedValue;
		}

		return calibaratedValue;
	}

	// calculate scale Y
	function calibarateScaleY(clientY, container, calDegree, transformOriginY) {
		var initialHeight = container.offsetHeight;
		var scaledHeight = container.getBoundingClientRect().height;
		transformOriginY = Number(transformOriginY);
		var transformOriginYCorrectionFactor = transformOriginY / (scaledHeight + transformOriginY);
		var scaleY = scaledHeight / initialHeight;
		scaleY = parseFloat(scaleY.toFixed(5));
		var calibaratedValue = 0;
		for (var calLevel = 0; calLevel <= calDegree; calLevel++) {
			calibaratedValue += clientY * Math.pow(1 - scaleY, calLevel);
		}
		for (var _calLevel2 = 1; _calLevel2 <= calDegree; _calLevel2++) {
			calibaratedValue -= transformOriginY * Math.pow(1 - scaleY, _calLevel2);
		}
		return calibaratedValue;
	}

	return {
		calibarateX: calibarateX,
		calibarateY: calibarateY
	};
}();

},{}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _functions = require("./functions.js");

var _functions2 = _interopRequireDefault(_functions);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// default canvas style
function initCanvasStyle(highlighter) {
	var context = highlighter.getContext();
	var radius = highlighter.getRadius();
	context.lineCap = "round";
	context.lineJoin = "round";
	context.globalCompositeOperation = "source-over";
	context.strokeStyle = highlighter.getColor();
	context.fillStyle = highlighter.getColor();
	context.lineWidth = radius * 2;
}

// Adjust canvas container position and dimensions with none scaled element
function canvasContainerAdjust(highlighter, canvasContainer, element) {
	var elementPositions = _functions2.default.getPosition(element);
	var canvasContainerDimensions = {
		width: element.getBoundingClientRect().width,
		height: element.getBoundingClientRect().height,
		left: elementPositions.x,
		top: elementPositions.y
	};
	_functions2.default.addToHighlighterOptions(highlighter, 'canvasContainerDimensions', canvasContainerDimensions);

	canvasContainer.style.width = highlighter.getCanvasContainerDimensions().width + 'px';
	canvasContainer.style.height = highlighter.getCanvasContainerDimensions().height + 'px';
	canvasContainer.style.position = 'absolute';
	canvasContainer.style.overflow = 'auto';
	canvasContainer.style.left = highlighter.getCanvasContainerDimensions().left + 'px';
	canvasContainer.style.top = highlighter.getCanvasContainerDimensions().top + 'px';
	canvasContainer.style.zIndex = highlighter.getZIndex();
	canvasContainer.style.pointerEvents = 'none';
	window.addEventListener("resize", adjustCanvasOnResize.bind(highlighter));
}

// whole Container style
function wholeContainerAdjust(wholeContainer) {
	wholeContainer.style.position = wholeContainer.style.position != 'absolute' ? 'relative' : 'absolute';
}

// element on resize
function adjustCanvasOnResize() {
	var canvasContainer = this.getCanvasContainer();
	var element = this.getElement();
	var elementPositions = _functions2.default.getPosition(element);
	canvasContainer.style.left = elementPositions.x + 'px';
	canvasContainer.style.top = elementPositions.y + 'px';
}

// Adjust canvas element dimensions
function canvasElementAdjust(highlighter, canvasElement, element) {
	canvasElement.style.width = element.scrollWidth + 'px';
	canvasElement.style.display = 'block';
	canvasElement.style.position = 'absolute';
	canvasElement.style.left = '0px';
	canvasElement.style.right = '0px';
	canvasElement.style.zIndex = '1';
	canvasElement.width = element.scrollWidth;
	canvasElement.style.height = element.scrollHeight + 'px';
	canvasElement.height = element.scrollHeight;
	canvasElement.style.opacity = highlighter.getOpacity();
}

function init(highlighter, wholeContainer, canvasContainer, element, canvasElement) {
	wholeContainerAdjust(wholeContainer);
	canvasContainerAdjust(highlighter, canvasContainer, element);
	canvasElementAdjust(highlighter, canvasElement, element);
	initCanvasStyle(highlighter);
}

exports.default = {
	init: init
};

},{"./functions.js":6}],4:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _calibartion = require('./calibartion.js');

var _calibartion2 = _interopRequireDefault(_calibartion);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// put a point on canvas
function putPoint(highlighter, elementX, elementY) {
	var context = highlighter.getContext();
	var radius = highlighter.getRadius();
	context.beginPath();
	context.arc(elementX, elementY, radius, 0, Math.PI * 2);
	context.fill();
}

// start paint on canvas
function startDrawing(event) {
	var parents = $(event.target).parents();
	var container = event.target.parentNode;
	var elementX = event.touches ? event.touches[0].clientX : event.pageX;
	var elementY = event.touches ? event.touches[0].clientY : event.pageY;
	var transformOriginY = $(container).css('transform-origin').split(' ')[1];
	var calibarationLevel = this.getCalibarationLevel();
	var lang = this.getLanguage();
	var context = this.getContext();
	transformOriginY = transformOriginY.replace('px', '');

	elementX = _calibartion2.default.calibarateX(elementX, parents, container, calibarationLevel, lang);
	elementY = _calibartion2.default.calibarateY(elementY, parents, container, calibarationLevel, transformOriginY);

	putPoint(this, elementX, elementY);
	context.beginPath();
	context.moveTo(elementX, elementY);
}

// draw lines on canvas
function drawLine(event) {
	var parents = $(event.target).parents();
	var container = event.target.parentNode;
	var elementX = event.touches ? event.touches[0].clientX : event.pageX;
	var elementY = event.touches ? event.touches[0].clientY : event.pageY;
	var transformOriginY = $(container).css('transform-origin').split(' ')[1];
	var calibarationLevel = this.getCalibarationLevel();
	var lang = this.getLanguage();
	var context = this.getContext();
	transformOriginY = transformOriginY.replace('px', '');

	elementX = _calibartion2.default.calibarateX(elementX, parents, container, calibarationLevel, lang);
	elementY = _calibartion2.default.calibarateY(elementY, parents, container, calibarationLevel, transformOriginY);

	context.lineTo(elementX, elementY);
	context.stroke();
	putPoint(this, elementX, elementY);
	context.beginPath();
	context.moveTo(elementX, elementY);
}

exports.default = {
	putPoint: putPoint,
	startDrawing: startDrawing,
	drawLine: drawLine
};

},{"./calibartion.js":2}],5:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
function initMarkStyle(highlighter) {
	var context = highlighter.getContext();
	context.globalCompositeOperation = "source-over";
}

function initEraseStyle(highlighter) {
	var context = highlighter.getContext();
	context.globalCompositeOperation = "destination-out";
}

exports.default = {
	initMarkStyle: initMarkStyle,
	initEraseStyle: initEraseStyle
};

},{}],6:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
// get position of element
function getPos(el) {
	var elements = [];
	for (var lx = 0, ly = 0; el != null; lx += el.offsetLeft, ly += el.offsetTop, el = el.offsetParent) {
		elements.push(el);
	}
	return { x: lx, y: ly, elements: elements };
}

// Helper function to get an element's exact position
function getPosition(el) {
	var xPos = 0;
	var yPos = 0;

	while (el) {
		if (el.tagName == "BODY") {
			// deal with browser quirks with body/window/document and page scroll
			var xScroll = el.scrollLeft || document.documentElement.scrollLeft;
			var yScroll = el.scrollTop || document.documentElement.scrollTop;

			xPos += el.offsetLeft - xScroll + el.clientLeft;
			yPos += el.offsetTop - yScroll + el.clientTop;
		} else {
			// for all other non-BODY elements
			xPos += el.offsetLeft - el.scrollLeft + el.clientLeft;
			yPos += el.offsetTop - el.scrollTop + el.clientTop;
		}

		el = el.offsetParent;
	}
	return {
		x: xPos,
		y: yPos
	};
}

function addToHighlighterOptions(highlighter, key, value) {
	highlighter.options[key] = value;
}

exports.default = {
	getPos: getPos,
	getPosition: getPosition,
	addToHighlighterOptions: addToHighlighterOptions
};

},{}],7:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _scrollattach = require('./scrollattach.js');

var _scrollattach2 = _interopRequireDefault(_scrollattach);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function activate(highlighter) {
	var canvasContainer = highlighter.getCanvasContainer();
	canvasContainer.style.pointerEvents = 'auto';
	_scrollattach2.default.unhookCanvasFromElement();
	_scrollattach2.default.hookElementToCanvas();
}

function deactivate(highlighter) {
	var canvasContainer = highlighter.getCanvasContainer();
	canvasContainer.style.pointerEvents = 'none';
	_scrollattach2.default.hookCanvasToElement();
	_scrollattach2.default.unhookElementFromCanvas();
}

exports.default = {
	activate: activate,
	deactivate: deactivate
};

},{"./scrollattach.js":10}],8:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _draw = require('./draw.js');

var _draw2 = _interopRequireDefault(_draw);

var _functions = require('./functions.js');

var _functions2 = _interopRequireDefault(_functions);

var _canvasstyledimension = require('./canvasstyledimension.js');

var _canvasstyledimension2 = _interopRequireDefault(_canvasstyledimension);

var _scrollattach = require('./scrollattach.js');

var _scrollattach2 = _interopRequireDefault(_scrollattach);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// initiate canvas on initiating highlighter object
function initCanvasOnElement(highlighter) {
	var wholeContainer = highlighter.getWholeContainer();
	var element = highlighter.getElement();

	// build canvas
	var canvasElement = document.createElement('canvas');

	// build canvas container
	var canvasContainer = buildCanvasContainer(highlighter);

	// append elements
	canvasContainer.appendChild(canvasElement);
	wholeContainer.appendChild(canvasContainer);

	// add to highlighter
	_functions2.default.addToHighlighterOptions(highlighter, 'canvasContainer', canvasContainer);
	_functions2.default.addToHighlighterOptions(highlighter, 'canvasElement', canvasElement);

	// init canvas styles and dimensions
	_canvasstyledimension2.default.init(highlighter, wholeContainer, canvasContainer, element, canvasElement);

	// bind canvas to element on scroll
	scrollAttachement(highlighter);

	// start draw on canvas
	drawCode(highlighter, canvasElement);
}

function scrollAttachement(highlighter) {
	_scrollattach2.default.initVariables(highlighter);
	_scrollattach2.default.hookCanvasToElement();
}

function drawCode(highlighter, canvasElement) {
	canvasElement.addEventListener('touchstart', _draw2.default.startDrawing.bind(highlighter), false);
	canvasElement.addEventListener('touchmove', _draw2.default.drawLine.bind(highlighter), false);
}

function buildCanvasContainer(highlighter) {
	var canvasContainer = void 0;
	var canvasContainerId = '#' + makeCanvasContainerId(highlighter);
	if (!document.querySelector(canvasContainerId)) {
		canvasContainer = document.createElement('div');
		canvasContainer.setAttribute('id', makeCanvasContainerId(highlighter));
	} else {
		canvasContainer = document.querySelector(canvasContainerId);
	}
	return canvasContainer;
}

function makeCanvasContainerId(highlighter) {
	var elementId = highlighter.options.element;
	var canvasContainerId = elementId + '-canvasContainer';
	return canvasContainerId;
}

exports.default = {
	initCanvasOnElement: initCanvasOnElement
};

},{"./canvasstyledimension.js":3,"./draw.js":4,"./functions.js":6,"./scrollattach.js":10}],9:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
function save(highlighter) {
	var canvasElement = highlighter.getCanvasElement();
	var imageData = canvasElement.toDataURL();
	highlighter.imageData = imageData;
	console.log(imageData);
	return imageData;
}

function load(highlighter) {
	if (highlighter.image) {
		(function () {
			var canvasElement = highlighter.getCanvasElement();
			var image = new Image();
			image.src = highlighter.imageData;
			image.onload = function () {
				canvasElement.getContext('2d').drawImage(image, 0, 0);
			};
		})();
	}
}

exports.default = {
	save: save,
	load: load
};

},{}],10:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
var element = void 0;
var canvasContainer = void 0;
//attach canvas to element
var attachCanvasToElement = void 0;
//attach element to canvas
var attachElementToCanvas = void 0;

function attachCanvasToElementEvent() {
	canvasContainer.scrollTop = element.scrollTop;
	canvasContainer.scrollLeft = element.scrollLeft;
}

function attachElementToCanvasEvent() {
	element.scrollTop = canvasContainer.scrollTop;
	element.scrollLeft = canvasContainer.scrollLeft;
}

function initVariables(highlighter) {
	attachCanvasToElement = attachCanvasToElementEvent.bind(highlighter);
	attachElementToCanvas = attachElementToCanvasEvent.bind(highlighter);
	canvasContainer = highlighter.getCanvasContainer();
	element = highlighter.getElement();
}

function hookCanvasToElement() {
	element.addEventListener('scroll', attachCanvasToElement);
}

function unhookCanvasFromElement() {
	element.removeEventListener('scroll', attachCanvasToElement);
}

function hookElementToCanvas() {
	canvasContainer.addEventListener('scroll', attachElementToCanvas);
}

function unhookElementFromCanvas() {
	canvasContainer.removeEventListener('scroll', attachElementToCanvas);
}

exports.default = {
	initVariables: initVariables,
	hookCanvasToElement: hookCanvasToElement,
	unhookCanvasFromElement: unhookCanvasFromElement,
	hookElementToCanvas: hookElementToCanvas,
	unhookElementFromCanvas: unhookElementFromCanvas
};

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmNcXGpzXFxoaWdobGlnaHRlci5qcyIsInNyY1xcanNcXHN0cnVjdHVyZVxcY2FsaWJhcnRpb24uanMiLCJzcmNcXGpzXFxzdHJ1Y3R1cmVcXGNhbnZhc3N0eWxlZGltZW5zaW9uLmpzIiwic3JjXFxqc1xcc3RydWN0dXJlXFxkcmF3LmpzIiwic3JjXFxqc1xcc3RydWN0dXJlXFxkcmF3c3R5bGVzLmpzIiwic3JjXFxqc1xcc3RydWN0dXJlXFxmdW5jdGlvbnMuanMiLCJzcmNcXGpzXFxzdHJ1Y3R1cmVcXGhpZ2hsaWdodGVyYWN0aXZhdGlvbi5qcyIsInNyY1xcanNcXHN0cnVjdHVyZVxcaW5pdGlhdGlvbi5qcyIsInNyY1xcanNcXHN0cnVjdHVyZVxcc2F2ZWxvYWQuanMiLCJzcmNcXGpzXFxzdHJ1Y3R1cmVcXHNjcm9sbGF0dGFjaC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7QUNBQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7Ozs7Ozs7SUFFTSxXO0FBQ0wsc0JBQVksT0FBWixFQUFxQjtBQUFBOztBQUNwQixPQUFLLE9BQUwsR0FBZSxPQUFmO0FBQ0EsT0FBSyxTQUFMLEdBQWlCLEVBQWpCO0FBQ0EsdUJBQVcsbUJBQVgsQ0FBK0IsSUFBL0I7QUFDQTs7OzsrQkFFWTtBQUNaLE9BQUksVUFBVSxTQUFTLGFBQVQsT0FBMkIsS0FBSyxPQUFMLENBQWEsT0FBeEMsQ0FBZDtBQUNBLE9BQUcsQ0FBQyxLQUFLLE9BQUwsQ0FBYSxPQUFkLElBQXlCLENBQUMsT0FBN0IsRUFBc0M7QUFDckMsVUFBTSx5QkFBTjtBQUNBO0FBQ0QsVUFBTyxPQUFQO0FBQ0E7OztxQ0FFa0I7QUFDbEIsVUFBTyxLQUFLLE9BQUwsQ0FBYSxhQUFwQjtBQUNBOzs7dUNBRW9CO0FBQ3BCLFVBQU8sS0FBSyxPQUFMLENBQWEsZUFBcEI7QUFDQTs7O2lEQUU4QjtBQUM5QixVQUFPLEtB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LHNCQUFxQixtQkFGUDtBQUdkLDBCQUF5Qix1QkFIWDtBQUlkLHNCQUFxQixtQkFKUDtBQUtkLDBCQUF5QjtBQUxYLEMiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiaW1wb3J0IGluaXRpYXRpb24gZnJvbSAnLi9zdHJ1Y3R1cmUvaW5pdGlhdGlvbi5qcyc7XHJcbmltcG9ydCBoaWdobGlnaHRlckFjdGl2YXRpb24gZnJvbSAnLi9zdHJ1Y3R1cmUvaGlnaGxpZ2h0ZXJhY3RpdmF0aW9uLmpzJztcclxuaW1wb3J0IGRyYXdTdHlsZXMgZnJvbSAnLi9zdHJ1Y3R1cmUvZHJhd3N0eWxlcy5qcyc7XHJcbmltcG9ydCBzYXZlbG9hZCBmcm9tICcuL3N0cnVjdHVyZS9zYXZlbG9hZC5qcyc7XHJcblxyXG5jbGFzcyBIaWdobGlnaHRlciB7XHJcblx0Y29uc3RydWN0b3Iob3B0aW9ucykge1xyXG5cdFx0dGhpcy5vcHRpb25zID0gb3B0aW9ucztcclxuXHRcdHRoaXMuaW1hZ2VEYXRhID0gJyc7XHJcblx0XHRpbml0aWF0aW9uLmluaXRDYW52YXNPbkVsZW1lbnQodGhpcyk7XHJcblx0fVxyXG5cclxuXHRnZXRFbGVtZW50KCkge1xyXG5cdFx0bGV0IGVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAjJHt0aGlzLm9wdGlvbnMuZWxlbWVudH1gKTtcclxuXHRcdGlmKCF0aGlzLm9wdGlvbnMuZWxlbWVudCB8fCAhZWxlbWVudCApe1xyXG5cdFx0XHR0aHJvdyAnZWxlbWVudCBpZCBub3QgZGV0ZWN0ZWQnO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIGVsZW1lbnQ7XHJcblx0fVxyXG5cclxuXHRnZXRDYW52YXNFbGVtZW50KCkge1xyXG5cdFx0cmV0dXJuIHRoaXMub3B0aW9ucy5jYW52YXNFbGVtZW50O1xyXG5cdH1cclxuXHJcblx0Z2V0Q2FudmFzQ29udGFpbmVyKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMub3B0aW9ucy5jYW52YXNDb250YWluZXI7XHJcblx0fVxyXG5cclxuXHRnZXRDYW52YXNDb250YWluZXJEaW1lbnNpb25zKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMub3B0aW9ucy5jYW52YXNDb250YWluZXJEaW1lbnNpb25zO1xyXG5cdH1cclxuXHJcblx0Z2V0V2hvbGVDb250YWluZXIoKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5vcHRpb25zLmNvbnRhaW5lciA/IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGhpcy5vcHRpb25zLmNvbnRhaW5lcikgOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdib2R5Jyk7XHJcblx0fVxyXG5cclxuXHRnZXRaSW5kZXgoKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5vcHRpb25zLnpJbmRleCB8fCAnMSc7XHJcblx0fVxyXG5cclxuXHRnZXRDYWxpYmFyYXRpb25MZXZlbCgpIHtcclxuXHRcdHJldHVybiB0aGlzLm9wdGlvbnMuY2FsaWJhcmF0aW9uTGV2ZWwgfHwgMTA7XHJcblx0fVxyXG5cclxuXHRnZXRMYW5ndWFnZSgpIHtcclxuXHRcdHJldHVybiB0aGlzLm9wdGlvbnMubGFuZyB8fCAnZSc7XHJcblx0fVxyXG5cclxuXHRnZXRSYWRpdXMoKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5vcHRpb25zLnJhZGl1cyB8fCAxMDtcclxuXHR9XHJcblxyXG5cdGdldENvbnRleHQoKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5nZXRDYW52YXNFbGVtZW50KCkuZ2V0Q29udGV4dCgnMmQnKTtcclxuXHR9XHJcblxyXG5cdGdldE9wYWNpdHkoKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5vcHRpb25zLm9wYWNpdHk7XHJcblx0fVxyXG5cclxuXHRnZXRDb2xvcigpIHtcclxuXHRcdHJldHVybiB0aGlzLm9wdGlvbnMuY29sb3IgfHwgJ3llbGxvdyc7XHJcblx0fVxyXG5cclxuXHRhY3RpdmF0ZUhpZ2hsaWdodGVyKCkge1xyXG5cdFx0aGlnaGxpZ2h0ZXJBY3RpdmF0aW9uLmFjdGl2YXRlKHRoaXMpO1xyXG5cdH1cclxuXHJcblx0ZGVhY3RpdmF0ZUhpZ2hsaWdodGVyKCkge1xyXG5cdFx0aGlnaGxpZ2h0ZXJBY3RpdmF0aW9uLmRlYWN0aXZhdGUodGhpcyk7XHJcblx0fVxyXG5cclxuXHRzdGFydE1hcmtlcigpIHtcclxuXHRcdGRyYXdTdHlsZXMuaW5pdE1hcmtTdHlsZSh0aGlzKTtcclxuXHR9XHJcblxyXG5cdHN0YXJ0RXJhc2VyKCkge1xyXG5cdFx0ZHJhd1N0eWxlcy5pbml0RXJhc2VTdHlsZSh0aGlzKTtcclxuXHR9XHJcblxyXG5cdHNhdmVJbWFnZSgpIHtcclxuXHRcdHNhdmVsb2FkLnNhdmUodGhpcyk7XHJcblx0fVxyXG5cclxuXHRsb2FkSW1hZ2UoKSB7XHJcblx0XHRzYXZlbG9hZC5sb2FkKHRoaXMpO1xyXG5cdH1cclxufVxyXG5cclxud2luZG93LkhpZ2hsaWdodGVyID0gSGlnaGxpZ2h0ZXI7IiwiLy8gY2FsaWJhcmF0aW9uIGFsZ29yaXRobXMgZm9yIHggYW5kIFkgcG9zaXRpb25zIG9mIHBvaW50c1xyXG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24oKSB7XHJcblxyXG5cdGZ1bmN0aW9uIGNhbGliYXJhdGVYKGNsaWVudFgsIHBhcmVudHMsIGNhbnZhc0NvbnRhaW5lciwgY2FsaWJhcmF0aW9uTGV2ZWwsIGxhbmcpIHtcclxuXHRcdHZhciBlbGVtZW50WCA9IGNsaWVudFg7XHJcblx0XHRlbGVtZW50WCA9IGNhbGliYXJhdGVFbGVtZW50WChlbGVtZW50WCwgcGFyZW50cyk7XHJcblx0XHRlbGVtZW50WCA9IGNhbGliYXJhdGVTY3JvbGxMZWZ0KGVsZW1lbnRYLCBwYXJlbnRzLCBjYW52YXNDb250YWluZXIpO1xyXG5cdFx0ZWxlbWVudFggPSBjYWxpYmFyYXRlU2NhbGVYKGVsZW1lbnRYLCBjYW52YXNDb250YWluZXIsIGNhbGliYXJhdGlvbkxldmVsLCBsYW5nKTtcclxuXHRcdHJldHVybiBlbGVtZW50WDtcclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIGNhbGliYXJhdGVZKGNsaWVudFksIHBhcmVudHMsIGNhbnZhc0NvbnRhaW5lciwgY2FsaWJhcmF0aW9uTGV2ZWwsIHRyYW5zZm9ybU9yaWdpblkpIHtcclxuXHRcdHZhciBlbGVtZW50WSA9IGNsaWVudFk7XHJcblx0XHRlbGVtZW50WSA9IGNhbGliYXJhdGVFbGVtZW50WShlbGVtZW50WSwgcGFyZW50cyk7XHJcblx0XHRlbGVtZW50WSA9IGNhbGliYXJhdGVTY3JvbGxUb3AoZWxlbWVudFksIHBhcmVudHMsIGNhbnZhc0NvbnRhaW5lcik7XHJcblx0XHRlbGVtZW50WSA9IGNhbGliYXJhdGVTY2FsZVkoZWxlbWVudFksIGNhbnZhc0NvbnRhaW5lciwgY2FsaWJhcmF0aW9uTGV2ZWwsIHRyYW5zZm9ybU9yaWdpblkpO1xyXG5cdFx0cmV0dXJuIGVsZW1lbnRZO1xyXG5cdH1cclxuXHJcblx0Ly8gaW4gY2FzZSBvZiBhYnNvbHV0ZSBkaXZzIG9ubHkgLSBjYWxjdWxhdGUgbGVmdFxyXG5cdGZ1bmN0aW9uIGNhbGliYXJhdGVFbGVtZW50WChjbGllbnRYLCBwYXJlbnRzKSB7XHJcblx0XHR2YXIgYWRkaXRpb25zID0gMDtcclxuXHRcdGxldCBhY2N1bU9mZnNldExlZnQgPSAwO1xyXG5cdFx0cGFyZW50cyA9IHBhcmVudHMudG9BcnJheSgpLnJldmVyc2UoKTtcclxuXHRcdHBhcmVudHMuZm9yRWFjaChmdW5jdGlvbihlbGVtZW50LCBudW1iZXIpIHtcclxuXHRcdFx0YWRkaXRpb25zICs9IChlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQgLSBhY2N1bU9mZnNldExlZnQpO1xyXG5cdFx0XHRhY2N1bU9mZnNldExlZnQgKz0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0O1xyXG5cdFx0fSk7XHJcblx0XHRyZXR1cm4gY2xpZW50WCAtIGFkZGl0aW9ucztcclxuXHR9XHJcblxyXG5cdC8vIGluIGNhc2Ugb2YgYWJzb2x1dGUgZGl2cyBvbmx5IC0gY2FsY3VsYXRlIHRvcFxyXG5cdGZ1bmN0aW9uIGNhbGliYXJhdGVFbGVtZW50WShjbGllbnRZLCBwYXJlbnRzKSB7XHJcblx0XHR2YXIgYWRkaXRpb25zID0gMDtcclxuXHRcdGxldCBhY2N1bU9mZnNldFRvcCA9IDA7XHJcblx0XHRwYXJlbnRzID0gcGFyZW50cy50b0FycmF5KCkucmV2ZXJzZSgpO1xyXG5cdFx0cGFyZW50cy5mb3JFYWNoKGZ1bmN0aW9uKGVsZW1lbnQsIG51bWJlcikge1xyXG5cdFx0XHRhZGRpdGlvbnMgKz0gKGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wIC0gYWNjdW1PZmZzZXRUb3ApO1xyXG5cdFx0XHRhY2N1bU9mZnNldFRvcCArPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcDtcclxuXHRcdH0pO1xyXG5cdFx0cmV0dXJuIGNsaWVudFkgLSBhZGRpdGlvbnM7XHJcblx0fVxyXG5cclxuXHQvLyBjYWxjdWxhdGUgc2Nyb2xsIGxlZnRcclxuXHRmdW5jdGlvbiBjYWxpYmFyYXRlU2Nyb2xsTGVmdChjbGllbnRYLCBwYXJlbnRzLCBjb250YWluZXIpIHtcclxuXHRcdHZhciBpbml0aWFsV2lkdGggPSBjb250YWluZXIub2Zmc2V0V2lkdGg7XHJcblx0XHR2YXIgc2NhbGVkV2lkdGggPSBjb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGg7XHJcblx0XHR2YXIgd2lkdGhEaWZmID0gc2NhbGVkV2lkdGggLSBpbml0aWFsV2lkdGg7XHJcblx0XHR2YXIgc2NhbGVYID0gc2NhbGVkV2lkdGggLyBpbml0aWFsV2lkdGg7XHJcblx0XHRzY2FsZVggPSBwYXJzZUZsb2F0KHNjYWxlWC50b0ZpeGVkKDUpKTtcclxuXHJcblx0XHR2YXIgYWRkaXRpb25zID0gMDtcclxuXHRcdHBhcmVudHMuZWFjaChmdW5jdGlvbihudW1iZXIsIGVsZW1lbnQpIHtcclxuXHRcdFx0aWYgKGVsZW1lbnQgPT09IGNvbnRhaW5lcikge1xyXG5cdFx0XHRcdGFkZGl0aW9ucyArPSBlbGVtZW50LnNjcm9sbExlZnQgKyBlbGVtZW50LnNjcm9sbExlZnQgKiAoc2NhbGVYIC0gMSk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0YWRkaXRpb25zICs9IGVsZW1lbnQuc2Nyb2xsTGVmdDtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0XHRyZXR1cm4gY2xpZW50WCArIGFkZGl0aW9ucztcclxuXHR9XHJcblxyXG5cdC8vIGNhbGN1bGF0ZSBzY3JvbGwgdG9wXHJcblx0ZnVuY3Rpb24gY2FsaWJhcmF0ZVNjcm9sbFRvcChjbGllbnRZLCBwYXJlbnRzLCBjb250YWluZXIpIHtcclxuXHRcdHZhciBpbml0aWFsSGVpZ2h0ID0gY29udGFpbmVyLm9mZnNldEhlaWdodDtcclxuXHRcdHZhciBzY2FsZWRIZWlnaHQgPSBjb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0O1xyXG5cdFx0dmFyIHNjYWxlWSA9IHNjYWxlZEhlaWdodCAvIGluaXRpYWxIZWlnaHQ7XHJcblx0XHRzY2FsZVkgPSBwYXJzZUZsb2F0KHNjYWxlWS50b0ZpeGVkKDUpKTtcclxuXHJcblx0XHR2YXIgYWRkaXRpb25zID0gMDtcclxuXHRcdHBhcmVudHMuZWFjaChmdW5jdGlvbihudW1iZXIsIGVsZW1lbnQpIHtcclxuXHRcdFx0aWYgKGVsZW1lbnQgPT09IGNvbnRhaW5lcikge1xyXG5cdFx0XHRcdGFkZGl0aW9ucyArPSBlbGVtZW50LnNjcm9sbFRvcCArIGVsZW1lbnQuc2Nyb2xsVG9wICogKHNjYWxlWSAtIDEpO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGFkZGl0aW9ucyArPSBlbGVtZW50LnNjcm9sbFRvcDtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0XHRyZXR1cm4gY2xpZW50WSArIGFkZGl0aW9ucztcclxuXHR9XHJcblxyXG5cdC8vIGNhbGN1bGF0ZSBzY2FsZSBYXHJcblx0ZnVuY3Rpb24gY2FsaWJhcmF0ZVNjYWxlWChjbGllbnRYLCBjb250YWluZXIsIGNhbERlZ3JlZSwgbGFuZykge1xyXG5cdFx0dmFyIGluaXRpYWxXaWR0aCA9IGNvbnRhaW5lci5vZmZzZXRXaWR0aDtcclxuXHRcdHZhciBzY2FsZWRXaWR0aCA9IGNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aDtcclxuXHRcdHZhciB3aWR0aERpZmYgPSBzY2FsZWRXaWR0aCAtIGluaXRpYWxXaWR0aDtcclxuXHRcdHZhciBzY2FsZVggPSBzY2FsZWRXaWR0aCAvIGluaXRpYWxXaWR0aDtcclxuXHRcdHNjYWxlWCA9IHBhcnNlRmxvYXQoc2NhbGVYLnRvRml4ZWQoNSkpO1xyXG5cdFx0dmFyIGNhbGliYXJhdGVkVmFsdWUgPSAwO1xyXG5cdFx0Zm9yICh2YXIgY2FsTGV2ZWwgPSAwOyBjYWxMZXZlbCA8PSBjYWxEZWdyZWU7IGNhbExldmVsKyspIHtcclxuXHRcdFx0Y2FsaWJhcmF0ZWRWYWx1ZSArPSBjbGllbnRYICogTWF0aC5wb3coMSAtIHNjYWxlWCwgY2FsTGV2ZWwpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmIChsYW5nID09PSAnYScpIHtcclxuXHRcdFx0Ly8gY2FsaWJhcmF0ZSB3aWR0aFxyXG5cdFx0XHRmb3IgKHZhciBfY2FsTGV2ZWwgPSAwOyBfY2FsTGV2ZWwgPD0gY2FsRGVncmVlOyBfY2FsTGV2ZWwrKykge1xyXG5cdFx0XHRcdGNhbGliYXJhdGVkVmFsdWUgKz0gd2lkdGhEaWZmICogTWF0aC5wb3coMSAtIHNjYWxlWCwgX2NhbExldmVsKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gY2FsaWJhcmF0ZWRWYWx1ZTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gY2FsaWJhcmF0ZWRWYWx1ZTtcclxuXHR9XHJcblxyXG5cdC8vIGNhbGN1bGF0ZSBzY2FsZSBZXHJcblx0ZnVuY3Rpb24gY2FsaWJhcmF0ZVNjYWxlWShjbGllbnRZLCBjb250YWluZXIsIGNhbERlZ3JlZSwgdHJhbnNmb3JtT3JpZ2luWSkge1xyXG5cdFx0dmFyIGluaXRpYWxIZWlnaHQgPSBjb250YWluZXIub2Zmc2V0SGVpZ2h0O1xyXG5cdFx0dmFyIHNjYWxlZEhlaWdodCA9IGNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQ7XHJcblx0XHR0cmFuc2Zvcm1PcmlnaW5ZID0gTnVtYmVyKHRyYW5zZm9ybU9yaWdpblkpO1xyXG5cdFx0dmFyIHRyYW5zZm9ybU9yaWdpbllDb3JyZWN0aW9uRmFjdG9yID0gdHJhbnNmb3JtT3JpZ2luWSAvIChzY2FsZWRIZWlnaHQgKyB0cmFuc2Zvcm1PcmlnaW5ZKTtcclxuXHRcdHZhciBzY2FsZVkgPSBzY2FsZWRIZWlnaHQgLyBpbml0aWFsSGVpZ2h0O1xyXG5cdFx0c2NhbGVZID0gcGFyc2VGbG9hdChzY2FsZVkudG9GaXhlZCg1KSk7XHJcblx0XHR2YXIgY2FsaWJhcmF0ZWRWYWx1ZSA9IDA7XHJcblx0XHRmb3IgKHZhciBjYWxMZXZlbCA9IDA7IGNhbExldmVsIDw9IGNhbERlZ3JlZTsgY2FsTGV2ZWwrKykge1xyXG5cdFx0XHRjYWxpYmFyYXRlZFZhbHVlICs9IGNsaWVudFkgKiBNYXRoLnBvdygxIC0gc2NhbGVZLCBjYWxMZXZlbCk7XHJcblx0XHR9XHJcblx0XHRmb3IgKHZhciBfY2FsTGV2ZWwyID0gMTsgX2NhbExldmVsMiA8PSBjYWxEZWdyZWU7IF9jYWxMZXZlbDIrKykge1xyXG5cdFx0XHRjYWxpYmFyYXRlZFZhbHVlIC09IHRyYW5zZm9ybU9yaWdpblkgKiBNYXRoLnBvdygxIC0gc2NhbGVZLCBfY2FsTGV2ZWwyKTtcclxuXHRcdH1cclxuXHRcdHJldHVybiBjYWxpYmFyYXRlZFZhbHVlO1xyXG5cdH1cclxuXHJcblx0cmV0dXJuIHtcclxuXHRcdGNhbGliYXJhdGVYOiBjYWxpYmFyYXRlWCxcclxuXHRcdGNhbGliYXJhdGVZOiBjYWxpYmFyYXRlWVxyXG5cdH1cclxuXHJcbn0oKSk7XHJcbiIsImltcG9ydCBmdW5jdGlvbnMgZnJvbSAnLi9mdW5jdGlvbnMuanMnO1xyXG5cclxuLy8gZGVmYXVsdCBjYW52YXMgc3R5bGVcclxuZnVuY3Rpb24gaW5pdENhbnZhc1N0eWxlKGhpZ2hsaWdodGVyKXtcclxuXHRsZXQgY29udGV4dCA9IGhpZ2hsaWdodGVyLmdldENvbnRleHQoKTtcclxuXHRsZXQgcmFkaXVzID0gaGlnaGxpZ2h0ZXIuZ2V0UmFkaXVzKCk7XHJcblx0Y29udGV4dC5saW5lQ2FwID0gXCJyb3VuZFwiO1xyXG5cdGNvbnRleHQubGluZUpvaW4gPSBcInJvdW5kXCI7XHJcblx0Y29udGV4dC5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb24gPSBcInNvdXJjZS1vdmVyXCI7XHJcblx0Y29udGV4dC5zdHJva2VTdHlsZSA9IGhpZ2hsaWdodGVyLmdldENvbG9yKCk7XHJcblx0Y29udGV4dC5maWxsU3R5bGUgPSBoaWdobGlnaHRlci5nZXRDb2xvcigpO1xyXG5cdGNvbnRleHQubGluZVdpZHRoID0gcmFkaXVzICogMjtcclxufVxyXG5cclxuLy8gQWRqdXN0IGNhbnZhcyBjb250YWluZXIgcG9zaXRpb24gYW5kIGRpbWVuc2lvbnMgd2l0aCBub25lIHNjYWxlZCBlbGVtZW50XHJcbmZ1bmN0aW9uIGNhbnZhc0NvbnRhaW5lckFkanVzdChoaWdobGlnaHRlciwgY2FudmFzQ29udGFpbmVyLCBlbGVtZW50KSB7XHJcblx0bGV0IGVsZW1lbnRQb3NpdGlvbnMgPSBmdW5jdGlvbnMuZ2V0UG9zaXRpb24oZWxlbWVudCk7XHJcblx0bGV0IGNhbnZhc0NvbnRhaW5lckRpbWVuc2lvbnMgPSB7XHJcblx0XHR3aWR0aDogZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCxcclxuXHRcdGhlaWdodDogZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQsXHJcblx0XHRsZWZ0OiBlbGVtZW50UG9zaXRpb25zLngsXHJcblx0XHR0b3A6IGVsZW1lbnRQb3NpdGlvbnMueSxcclxuXHR9O1xyXG5cdGZ1bmN0aW9ucy5hZGRUb0hpZ2hsaWdodGVyT3B0aW9ucyhoaWdobGlnaHRlciwgJ2NhbnZhc0NvbnRhaW5lckRpbWVuc2lvbnMnLCBjYW52YXNDb250YWluZXJEaW1lbnNpb25zKTtcclxuXHJcblx0Y2FudmFzQ29udGFpbmVyLnN0eWxlLndpZHRoID0gaGlnaGxpZ2h0ZXIuZ2V0Q2FudmFzQ29udGFpbmVyRGltZW5zaW9ucygpLndpZHRoICsgJ3B4JztcclxuXHRjYW52YXNDb250YWluZXIuc3R5bGUuaGVpZ2h0ID0gaGlnaGxpZ2h0ZXIuZ2V0Q2FudmFzQ29udGFpbmVyRGltZW5zaW9ucygpLmhlaWdodCArICdweCc7XHJcblx0Y2FudmFzQ29udGFpbmVyLnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcclxuXHRjYW52YXNDb250YWluZXIuc3R5bGUub3ZlcmZsb3cgPSAnYXV0byc7XHJcblx0Y2FudmFzQ29udGFpbmVyLnN0eWxlLmxlZnQgPSBoaWdobGlnaHRlci5nZXRDYW52YXNDb250YWluZXJEaW1lbnNpb25zKCkubGVmdCArICdweCc7XHJcblx0Y2FudmFzQ29udGFpbmVyLnN0eWxlLnRvcCA9IGhpZ2hsaWdodGVyLmdldENhbnZhc0NvbnRhaW5lckRpbWVuc2lvbnMoKS50b3AgKyAncHgnO1xyXG5cdGNhbnZhc0NvbnRhaW5lci5zdHlsZS56SW5kZXggPSBoaWdobGlnaHRlci5nZXRaSW5kZXgoKTtcclxuXHRjYW52YXNDb250YWluZXIuc3R5bGUucG9pbnRlckV2ZW50cyA9ICdub25lJztcclxuXHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCBhZGp1c3RDYW52YXNPblJlc2l6ZS5iaW5kKGhpZ2hsaWdodGVyKSk7XHJcbn1cclxuXHJcbi8vIHdob2xlIENvbnRhaW5lciBzdHlsZVxyXG5mdW5jdGlvbiB3aG9sZUNvbnRhaW5lckFkanVzdCh3aG9sZUNvbnRhaW5lcil7XHJcblx0d2hvbGVDb250YWluZXIuc3R5bGUucG9zaXRpb24gPSB3aG9sZUNvbnRhaW5lci5zdHlsZS5wb3NpdGlvbiAhPSAnYWJzb2x1dGUnID8gJ3JlbGF0aXZlJyA6ICdhYnNvbHV0ZSc7XHJcbn1cclxuXHJcbi8vIGVsZW1lbnQgb24gcmVzaXplXHJcbmZ1bmN0aW9uIGFkanVzdENhbnZhc09uUmVzaXplKCl7XHJcblx0bGV0IGNhbnZhc0NvbnRhaW5lciA9IHRoaXMuZ2V0Q2FudmFzQ29udGFpbmVyKCk7XHJcblx0bGV0IGVsZW1lbnQgPSB0aGlzLmdldEVsZW1lbnQoKTtcclxuXHRsZXQgZWxlbWVudFBvc2l0aW9ucyA9IGZ1bmN0aW9ucy5nZXRQb3NpdGlvbihlbGVtZW50KTtcclxuXHRjYW52YXNDb250YWluZXIuc3R5bGUubGVmdCA9IGVsZW1lbnRQb3NpdGlvbnMueCArICdweCc7XHJcblx0Y2FudmFzQ29udGFpbmVyLnN0eWxlLnRvcCA9IGVsZW1lbnRQb3NpdGlvbnMueSArICdweCc7XHJcbn1cclxuXHJcbi8vIEFkanVzdCBjYW52YXMgZWxlbWVudCBkaW1lbnNpb25zXHJcbmZ1bmN0aW9uIGNhbnZhc0VsZW1lbnRBZGp1c3QoaGlnaGxpZ2h0ZXIsIGNhbnZhc0VsZW1lbnQsIGVsZW1lbnQpIHtcclxuXHRjYW52YXNFbGVtZW50LnN0eWxlLndpZHRoID0gZWxlbWVudC5zY3JvbGxXaWR0aCArICdweCc7XHJcblx0Y2FudmFzRWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuXHRjYW52YXNFbGVtZW50LnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcclxuXHRjYW52YXNFbGVtZW50LnN0eWxlLmxlZnQgPSAnMHB4JztcclxuXHRjYW52YXNFbGVtZW50LnN0eWxlLnJpZ2h0ID0gJzBweCc7XHJcblx0Y2FudmFzRWxlbWVudC5zdHlsZS56SW5kZXggPSAnMSc7XHJcblx0Y2FudmFzRWxlbWVudC53aWR0aCA9IGVsZW1lbnQuc2Nyb2xsV2lkdGg7XHJcblx0Y2FudmFzRWxlbWVudC5zdHlsZS5oZWlnaHQgPSBlbGVtZW50LnNjcm9sbEhlaWdodCArICdweCc7XHJcblx0Y2FudmFzRWxlbWVudC5oZWlnaHQgPSBlbGVtZW50LnNjcm9sbEhlaWdodDtcclxuXHRjYW52YXNFbGVtZW50LnN0eWxlLm9wYWNpdHkgPSBoaWdobGlnaHRlci5nZXRPcGFjaXR5KCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGluaXQoaGlnaGxpZ2h0ZXIsIHdob2xlQ29udGFpbmVyLCBjYW52YXNDb250YWluZXIsIGVsZW1lbnQsIGNhbnZhc0VsZW1lbnQpe1xyXG5cdHdob2xlQ29udGFpbmVyQWRqdXN0KHdob2xlQ29udGFpbmVyKTtcclxuXHRjYW52YXNDb250YWluZXJBZGp1c3QoaGlnaGxpZ2h0ZXIsIGNhbnZhc0NvbnRhaW5lciwgZWxlbWVudCk7XHJcblx0Y2FudmFzRWxlbWVudEFkanVzdChoaWdobGlnaHRlciwgY2FudmFzRWxlbWVudCwgZWxlbWVudCk7XHJcblx0aW5pdENhbnZhc1N0eWxlKGhpZ2hsaWdodGVyKTtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG5cdGluaXQ6IGluaXRcclxufSIsImltcG9ydCBjYWxpYmFydGlvbiBmcm9tICcuL2NhbGliYXJ0aW9uLmpzJztcclxuXHJcbi8vIHB1dCBhIHBvaW50IG9uIGNhbnZhc1xyXG5mdW5jdGlvbiBwdXRQb2ludChoaWdobGlnaHRlciwgZWxlbWVudFgsIGVsZW1lbnRZKSB7XHJcblx0dmFyIGNvbnRleHQgPSBoaWdobGlnaHRlci5nZXRDb250ZXh0KCk7XHJcblx0dmFyIHJhZGl1cyA9IGhpZ2hsaWdodGVyLmdldFJhZGl1cygpO1xyXG5cdGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcblx0Y29udGV4dC5hcmMoZWxlbWVudFgsIGVsZW1lbnRZLCByYWRpdXMsIDAsIE1hdGguUEkgKiAyKTtcclxuXHRjb250ZXh0LmZpbGwoKTtcclxufVxyXG5cclxuLy8gc3RhcnQgcGFpbnQgb24gY2FudmFzXHJcbmZ1bmN0aW9uIHN0YXJ0RHJhd2luZyhldmVudCkge1xyXG5cdHZhciBwYXJlbnRzID0gJChldmVudC50YXJnZXQpLnBhcmVudHMoKTtcclxuXHR2YXIgY29udGFpbmVyID0gZXZlbnQudGFyZ2V0LnBhcmVudE5vZGU7XHJcblx0dmFyIGVsZW1lbnRYID0gZXZlbnQudG91Y2hlcyA/IGV2ZW50LnRvdWNoZXNbMF0uY2xpZW50WCA6IGV2ZW50LnBhZ2VYO1xyXG5cdHZhciBlbGVtZW50WSA9IGV2ZW50LnRvdWNoZXMgPyBldmVudC50b3VjaGVzWzBdLmNsaWVudFkgOiBldmVudC5wYWdlWTtcclxuXHR2YXIgdHJhbnNmb3JtT3JpZ2luWSA9ICQoY29udGFpbmVyKS5jc3MoJ3RyYW5zZm9ybS1vcmlnaW4nKS5zcGxpdCgnICcpWzFdO1xyXG5cdHZhciBjYWxpYmFyYXRpb25MZXZlbCA9IHRoaXMuZ2V0Q2FsaWJhcmF0aW9uTGV2ZWwoKTtcclxuXHR2YXIgbGFuZyA9IHRoaXMuZ2V0TGFuZ3VhZ2UoKTtcclxuXHR2YXIgY29udGV4dCA9IHRoaXMuZ2V0Q29udGV4dCgpO1xyXG5cdHRyYW5zZm9ybU9yaWdpblkgPSB0cmFuc2Zvcm1PcmlnaW5ZLnJlcGxhY2UoJ3B4JywgJycpO1xyXG5cclxuXHRlbGVtZW50WCA9IGNhbGliYXJ0aW9uLmNhbGliYXJhdGVYKGVsZW1lbnRYLCBwYXJlbnRzLCBjb250YWluZXIsIGNhbGliYXJhdGlvbkxldmVsLCBsYW5nKTtcclxuXHRlbGVtZW50WSA9IGNhbGliYXJ0aW9uLmNhbGliYXJhdGVZKGVsZW1lbnRZLCBwYXJlbnRzLCBjb250YWluZXIsIGNhbGliYXJhdGlvbkxldmVsLCB0cmFuc2Zvcm1PcmlnaW5ZKTtcclxuXHJcblx0cHV0UG9pbnQodGhpcywgZWxlbWVudFgsIGVsZW1lbnRZKTtcclxuXHRjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG5cdGNvbnRleHQubW92ZVRvKGVsZW1lbnRYLCBlbGVtZW50WSk7XHJcbn1cclxuXHJcbi8vIGRyYXcgbGluZXMgb24gY2FudmFzXHJcbmZ1bmN0aW9uIGRyYXdMaW5lKGV2ZW50KSB7XHJcblx0dmFyIHBhcmVudHMgPSAkKGV2ZW50LnRhcmdldCkucGFyZW50cygpO1xyXG5cdHZhciBjb250YWluZXIgPSBldmVudC50YXJnZXQucGFyZW50Tm9kZTtcclxuXHR2YXIgZWxlbWVudFggPSBldmVudC50b3VjaGVzID8gZXZlbnQudG91Y2hlc1swXS5jbGllbnRYIDogZXZlbnQucGFnZVg7XHJcblx0dmFyIGVsZW1lbnRZID0gZXZlbnQudG91Y2hlcyA/IGV2ZW50LnRvdWNoZXNbMF0uY2xpZW50WSA6IGV2ZW50LnBhZ2VZO1xyXG5cdHZhciB0cmFuc2Zvcm1PcmlnaW5ZID0gJChjb250YWluZXIpLmNzcygndHJhbnNmb3JtLW9yaWdpbicpLnNwbGl0KCcgJylbMV07XHJcblx0dmFyIGNhbGliYXJhdGlvbkxldmVsID0gdGhpcy5nZXRDYWxpYmFyYXRpb25MZXZlbCgpO1xyXG5cdHZhciBsYW5nID0gdGhpcy5nZXRMYW5ndWFnZSgpO1xyXG5cdHZhciBjb250ZXh0ID0gdGhpcy5nZXRDb250ZXh0KCk7XHJcblx0dHJhbnNmb3JtT3JpZ2luWSA9IHRyYW5zZm9ybU9yaWdpblkucmVwbGFjZSgncHgnLCAnJyk7XHJcblxyXG5cdGVsZW1lbnRYID0gY2FsaWJhcnRpb24uY2FsaWJhcmF0ZVgoZWxlbWVudFgsIHBhcmVudHMsIGNvbnRhaW5lciwgY2FsaWJhcmF0aW9uTGV2ZWwsIGxhbmcpO1xyXG5cdGVsZW1lbnRZID0gY2FsaWJhcnRpb24uY2FsaWJhcmF0ZVkoZWxlbWVudFksIHBhcmVudHMsIGNvbnRhaW5lciwgY2FsaWJhcmF0aW9uTGV2ZWwsIHRyYW5zZm9ybU9yaWdpblkpO1xyXG5cclxuXHRjb250ZXh0LmxpbmVUbyhlbGVtZW50WCwgZWxlbWVudFkpO1xyXG5cdGNvbnRleHQuc3Ryb2tlKCk7XHJcblx0cHV0UG9pbnQodGhpcywgZWxlbWVudFgsIGVsZW1lbnRZKTtcclxuXHRjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG5cdGNvbnRleHQubW92ZVRvKGVsZW1lbnRYLCBlbGVtZW50WSk7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuXHRwdXRQb2ludDogcHV0UG9pbnQsXHJcblx0c3RhcnREcmF3aW5nOiBzdGFydERyYXdpbmcsXHJcblx0ZHJhd0xpbmU6IGRyYXdMaW5lXHJcbn0iLCJmdW5jdGlvbiBpbml0TWFya1N0eWxlKGhpZ2hsaWdodGVyKXtcclxuXHRsZXQgY29udGV4dCA9IGhpZ2hsaWdodGVyLmdldENvbnRleHQoKTtcclxuXHRjb250ZXh0Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiA9IFwic291cmNlLW92ZXJcIjtcclxufVxyXG5cclxuZnVuY3Rpb24gaW5pdEVyYXNlU3R5bGUoaGlnaGxpZ2h0ZXIpe1xyXG5cdGxldCBjb250ZXh0ID0gaGlnaGxpZ2h0ZXIuZ2V0Q29udGV4dCgpO1xyXG5cdGNvbnRleHQuZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uID0gXCJkZXN0aW5hdGlvbi1vdXRcIjtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG5cdGluaXRNYXJrU3R5bGU6IGluaXRNYXJrU3R5bGUsXHJcblx0aW5pdEVyYXNlU3R5bGU6IGluaXRFcmFzZVN0eWxlXHJcbn1cclxuIiwiLy8gZ2V0IHBvc2l0aW9uIG9mIGVsZW1lbnRcclxuZnVuY3Rpb24gZ2V0UG9zKGVsKSB7XHJcblx0bGV0IGVsZW1lbnRzID0gW107XHJcblx0Zm9yICh2YXIgbHggPSAwLCBseSA9IDA7IGVsICE9IG51bGw7IGx4ICs9IGVsLm9mZnNldExlZnQsIGx5ICs9IGVsLm9mZnNldFRvcCwgZWwgPSBlbC5vZmZzZXRQYXJlbnQpe1xyXG5cdFx0ZWxlbWVudHMucHVzaChlbCk7XHJcblx0fVxyXG5cdHJldHVybiB7IHg6IGx4LCB5OiBseSwgZWxlbWVudHM6IGVsZW1lbnRzIH07XHJcbn1cclxuXHJcblxyXG4vLyBIZWxwZXIgZnVuY3Rpb24gdG8gZ2V0IGFuIGVsZW1lbnQncyBleGFjdCBwb3NpdGlvblxyXG5mdW5jdGlvbiBnZXRQb3NpdGlvbihlbCkge1xyXG5cdHZhciB4UG9zID0gMDtcclxuXHR2YXIgeVBvcyA9IDA7XHJcblxyXG5cdHdoaWxlIChlbCkge1xyXG5cdFx0aWYgKGVsLnRhZ05hbWUgPT0gXCJCT0RZXCIpIHtcclxuXHRcdFx0Ly8gZGVhbCB3aXRoIGJyb3dzZXIgcXVpcmtzIHdpdGggYm9keS93aW5kb3cvZG9jdW1lbnQgYW5kIHBhZ2Ugc2Nyb2xsXHJcblx0XHRcdHZhciB4U2Nyb2xsID0gZWwuc2Nyb2xsTGVmdCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsTGVmdDtcclxuXHRcdFx0dmFyIHlTY3JvbGwgPSBlbC5zY3JvbGxUb3AgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcDtcclxuXHJcblx0XHRcdHhQb3MgKz0gKGVsLm9mZnNldExlZnQgLSB4U2Nyb2xsICsgZWwuY2xpZW50TGVmdCk7XHJcblx0XHRcdHlQb3MgKz0gKGVsLm9mZnNldFRvcCAtIHlTY3JvbGwgKyBlbC5jbGllbnRUb3ApO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0Ly8gZm9yIGFsbCBvdGhlciBub24tQk9EWSBlbGVtZW50c1xyXG5cdFx0XHR4UG9zICs9IChlbC5vZmZzZXRMZWZ0IC0gZWwuc2Nyb2xsTGVmdCArIGVsLmNsaWVudExlZnQpO1xyXG5cdFx0XHR5UG9zICs9IChlbC5vZmZzZXRUb3AgLSBlbC5zY3JvbGxUb3AgKyBlbC5jbGllbnRUb3ApO1xyXG5cdFx0fVxyXG5cclxuXHRcdGVsID0gZWwub2Zmc2V0UGFyZW50O1xyXG5cdH1cclxuXHRyZXR1cm4ge1xyXG5cdFx0eDogeFBvcyxcclxuXHRcdHk6IHlQb3NcclxuXHR9O1xyXG59XHJcblxyXG5mdW5jdGlvbiBhZGRUb0hpZ2hsaWdodGVyT3B0aW9ucyhoaWdobGlnaHRlciwga2V5LCB2YWx1ZSl7XHJcblx0aGlnaGxpZ2h0ZXIub3B0aW9uc1trZXldID0gdmFsdWU7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuXHRnZXRQb3M6IGdldFBvcyxcclxuXHRnZXRQb3NpdGlvbjogZ2V0UG9zaXRpb24sXHJcblx0YWRkVG9IaWdobGlnaHRlck9wdGlvbnM6IGFkZFRvSGlnaGxpZ2h0ZXJPcHRpb25zXHJcbn0iLCJpbXBvcnQgc2Nyb2xsYXR0YWNoIGZyb20gJy4vc2Nyb2xsYXR0YWNoLmpzJztcclxuXHJcbmZ1bmN0aW9uIGFjdGl2YXRlKGhpZ2hsaWdodGVyKXtcclxuXHRsZXQgY2FudmFzQ29udGFpbmVyID0gaGlnaGxpZ2h0ZXIuZ2V0Q2FudmFzQ29udGFpbmVyKCk7XHJcblx0Y2FudmFzQ29udGFpbmVyLnN0eWxlLnBvaW50ZXJFdmVudHMgPSAnYXV0byc7XHJcblx0c2Nyb2xsYXR0YWNoLnVuaG9va0NhbnZhc0Zyb21FbGVtZW50KCk7XHJcblx0c2Nyb2xsYXR0YWNoLmhvb2tFbGVtZW50VG9DYW52YXMoKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZGVhY3RpdmF0ZShoaWdobGlnaHRlcil7XHJcblx0bGV0IGNhbnZhc0NvbnRhaW5lciA9IGhpZ2hsaWdodGVyLmdldENhbnZhc0NvbnRhaW5lcigpO1xyXG5cdGNhbnZhc0NvbnRhaW5lci5zdHlsZS5wb2ludGVyRXZlbnRzID0gJ25vbmUnO1xyXG5cdHNjcm9sbGF0dGFjaC5ob29rQ2FudmFzVG9FbGVtZW50KCk7XHJcblx0c2Nyb2xsYXR0YWNoLnVuaG9va0VsZW1lbnRGcm9tQ2FudmFzKCk7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuXHRhY3RpdmF0ZTogYWN0aXZhdGUsXHJcblx0ZGVhY3RpdmF0ZTogZGVhY3RpdmF0ZVxyXG59IiwiaW1wb3J0IGRyYXcgZnJvbSAnLi9kcmF3LmpzJztcclxuaW1wb3J0IGZ1bmN0aW9ucyBmcm9tICcuL2Z1bmN0aW9ucy5qcyc7XHJcbmltcG9ydCBjYW52YXNzdHlsZWRpbWVuc2lvbiBmcm9tICcuL2NhbnZhc3N0eWxlZGltZW5zaW9uLmpzJztcclxuaW1wb3J0IHNjcm9sbGF0dGFjaCBmcm9tICcuL3Njcm9sbGF0dGFjaC5qcyc7XHJcblxyXG4vLyBpbml0aWF0ZSBjYW52YXMgb24gaW5pdGlhdGluZyBoaWdobGlnaHRlciBvYmplY3RcclxuZnVuY3Rpb24gaW5pdENhbnZhc09uRWxlbWVudChoaWdobGlnaHRlcikge1xyXG5cdGxldCB3aG9sZUNvbnRhaW5lciA9IGhpZ2hsaWdodGVyLmdldFdob2xlQ29udGFpbmVyKCk7XHJcblx0bGV0IGVsZW1lbnQgPSBoaWdobGlnaHRlci5nZXRFbGVtZW50KCk7XHJcblxyXG5cdC8vIGJ1aWxkIGNhbnZhc1xyXG5cdGxldCBjYW52YXNFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XHJcblxyXG5cdC8vIGJ1aWxkIGNhbnZhcyBjb250YWluZXJcclxuXHRsZXQgY2FudmFzQ29udGFpbmVyID0gYnVpbGRDYW52YXNDb250YWluZXIoaGlnaGxpZ2h0ZXIpO1xyXG5cclxuXHQvLyBhcHBlbmQgZWxlbWVudHNcclxuXHRjYW52YXNDb250YWluZXIuYXBwZW5kQ2hpbGQoY2FudmFzRWxlbWVudCk7XHJcblx0d2hvbGVDb250YWluZXIuYXBwZW5kQ2hpbGQoY2FudmFzQ29udGFpbmVyKTtcclxuXHJcblx0Ly8gYWRkIHRvIGhpZ2hsaWdodGVyXHJcblx0ZnVuY3Rpb25zLmFkZFRvSGlnaGxpZ2h0ZXJPcHRpb25zKGhpZ2hsaWdodGVyLCAnY2FudmFzQ29udGFpbmVyJywgY2FudmFzQ29udGFpbmVyKTtcclxuXHRmdW5jdGlvbnMuYWRkVG9IaWdobGlnaHRlck9wdGlvbnMoaGlnaGxpZ2h0ZXIsICdjYW52YXNFbGVtZW50JywgY2FudmFzRWxlbWVudCk7XHJcblxyXG5cdC8vIGluaXQgY2FudmFzIHN0eWxlcyBhbmQgZGltZW5zaW9uc1xyXG5cdGNhbnZhc3N0eWxlZGltZW5zaW9uLmluaXQoaGlnaGxpZ2h0ZXIsIHdob2xlQ29udGFpbmVyLCBjYW52YXNDb250YWluZXIsIGVsZW1lbnQsIGNhbnZhc0VsZW1lbnQpO1xyXG5cclxuXHQvLyBiaW5kIGNhbnZhcyB0byBlbGVtZW50IG9uIHNjcm9sbFxyXG5cdHNjcm9sbEF0dGFjaGVtZW50KGhpZ2hsaWdodGVyKTtcclxuXHJcblx0Ly8gc3RhcnQgZHJhdyBvbiBjYW52YXNcclxuXHRkcmF3Q29kZShoaWdobGlnaHRlciwgY2FudmFzRWxlbWVudCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNjcm9sbEF0dGFjaGVtZW50KGhpZ2hsaWdodGVyKXtcclxuXHRzY3JvbGxhdHRhY2guaW5pdFZhcmlhYmxlcyhoaWdobGlnaHRlcik7XHJcblx0c2Nyb2xsYXR0YWNoLmhvb2tDYW52YXNUb0VsZW1lbnQoKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZHJhd0NvZGUoaGlnaGxpZ2h0ZXIsIGNhbnZhc0VsZW1lbnQpe1xyXG5cdGNhbnZhc0VsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIGRyYXcuc3RhcnREcmF3aW5nLmJpbmQoaGlnaGxpZ2h0ZXIpLCBmYWxzZSk7XHJcblx0Y2FudmFzRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCBkcmF3LmRyYXdMaW5lLmJpbmQoaGlnaGxpZ2h0ZXIpLCBmYWxzZSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGJ1aWxkQ2FudmFzQ29udGFpbmVyKGhpZ2hsaWdodGVyKXtcclxuXHRsZXQgY2FudmFzQ29udGFpbmVyO1xyXG5cdGxldCBjYW52YXNDb250YWluZXJJZCA9IGAjJHttYWtlQ2FudmFzQ29udGFpbmVySWQoaGlnaGxpZ2h0ZXIpfWA7XHJcblx0aWYoICFkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGNhbnZhc0NvbnRhaW5lcklkKSl7XHJcblx0XHRjYW52YXNDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuXHRcdGNhbnZhc0NvbnRhaW5lci5zZXRBdHRyaWJ1dGUoJ2lkJywgbWFrZUNhbnZhc0NvbnRhaW5lcklkKGhpZ2hsaWdodGVyKSk7XHJcblx0fSBlbHNlIHtcclxuXHRcdGNhbnZhc0NvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoY2FudmFzQ29udGFpbmVySWQpO1xyXG5cdH1cclxuXHRyZXR1cm4gY2FudmFzQ29udGFpbmVyO1xyXG59XHJcblxyXG5mdW5jdGlvbiBtYWtlQ2FudmFzQ29udGFpbmVySWQoaGlnaGxpZ2h0ZXIpe1xyXG5cdGxldCBlbGVtZW50SWQgPSBoaWdobGlnaHRlci5vcHRpb25zLmVsZW1lbnQ7XHJcblx0bGV0IGNhbnZhc0NvbnRhaW5lcklkID0gYCR7ZWxlbWVudElkfS1jYW52YXNDb250YWluZXJgO1xyXG5cdHJldHVybiBjYW52YXNDb250YWluZXJJZDtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG5cdGluaXRDYW52YXNPbkVsZW1lbnQ6IGluaXRDYW52YXNPbkVsZW1lbnRcclxufSIsImZ1bmN0aW9uIHNhdmUoaGlnaGxpZ2h0ZXIpe1xyXG5cdGxldCBjYW52YXNFbGVtZW50ID0gaGlnaGxpZ2h0ZXIuZ2V0Q2FudmFzRWxlbWVudCgpO1xyXG5cdGxldCBpbWFnZURhdGEgPSBjYW52YXNFbGVtZW50LnRvRGF0YVVSTCgpO1xyXG5cdGhpZ2hsaWdodGVyLmltYWdlRGF0YSA9IGltYWdlRGF0YTtcclxuXHRjb25zb2xlLmxvZyhpbWFnZURhdGEpO1xyXG5cdHJldHVybiBpbWFnZURhdGE7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGxvYWQoaGlnaGxpZ2h0ZXIpe1xyXG5cdGlmKGhpZ2hsaWdodGVyLmltYWdlKXtcclxuXHRcdGxldCBjYW52YXNFbGVtZW50ID0gaGlnaGxpZ2h0ZXIuZ2V0Q2FudmFzRWxlbWVudCgpO1xyXG5cdFx0bGV0IGltYWdlID0gbmV3IEltYWdlKCk7XHJcblx0XHRpbWFnZS5zcmMgPSBoaWdobGlnaHRlci5pbWFnZURhdGE7XHJcblx0XHRpbWFnZS5vbmxvYWQgPSBmdW5jdGlvbigpe1xyXG5cdFx0XHRjYW52YXNFbGVtZW50LmdldENvbnRleHQoJzJkJykuZHJhd0ltYWdlKGltYWdlLCAwICwgMCk7XHJcblx0XHR9O1xyXG5cdH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG5cdHNhdmU6IHNhdmUsXHJcblx0bG9hZDogbG9hZFxyXG59IiwibGV0IGVsZW1lbnQ7XHJcbmxldCBjYW52YXNDb250YWluZXI7XHJcbi8vYXR0YWNoIGNhbnZhcyB0byBlbGVtZW50XHJcbmxldCBhdHRhY2hDYW52YXNUb0VsZW1lbnQ7XHJcbi8vYXR0YWNoIGVsZW1lbnQgdG8gY2FudmFzXHJcbmxldCBhdHRhY2hFbGVtZW50VG9DYW52YXM7XHJcblxyXG5mdW5jdGlvbiBhdHRhY2hDYW52YXNUb0VsZW1lbnRFdmVudCgpe1xyXG5cdGNhbnZhc0NvbnRhaW5lci5zY3JvbGxUb3AgPSBlbGVtZW50LnNjcm9sbFRvcDtcclxuXHRjYW52YXNDb250YWluZXIuc2Nyb2xsTGVmdCA9IGVsZW1lbnQuc2Nyb2xsTGVmdDtcclxufVxyXG5cclxuZnVuY3Rpb24gYXR0YWNoRWxlbWVudFRvQ2FudmFzRXZlbnQoKXtcclxuXHRlbGVtZW50LnNjcm9sbFRvcCA9IGNhbnZhc0NvbnRhaW5lci5zY3JvbGxUb3A7XHJcblx0ZWxlbWVudC5zY3JvbGxMZWZ0ID0gY2FudmFzQ29udGFpbmVyLnNjcm9sbExlZnQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGluaXRWYXJpYWJsZXMoaGlnaGxpZ2h0ZXIpe1xyXG5cdGF0dGFjaENhbnZhc1RvRWxlbWVudCA9IGF0dGFjaENhbnZhc1RvRWxlbWVudEV2ZW50LmJpbmQoaGlnaGxpZ2h0ZXIpO1xyXG5cdGF0dGFjaEVsZW1lbnRUb0NhbnZhcz0gYXR0YWNoRWxlbWVudFRvQ2FudmFzRXZlbnQuYmluZChoaWdobGlnaHRlcik7XHJcblx0Y2FudmFzQ29udGFpbmVyID0gaGlnaGxpZ2h0ZXIuZ2V0Q2FudmFzQ29udGFpbmVyKCk7XHJcblx0ZWxlbWVudCA9IGhpZ2hsaWdodGVyLmdldEVsZW1lbnQoKTtcclxufVxyXG5cclxuZnVuY3Rpb24gaG9va0NhbnZhc1RvRWxlbWVudCgpe1xyXG5cdGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgYXR0YWNoQ2FudmFzVG9FbGVtZW50KTtcclxufVxyXG5cclxuZnVuY3Rpb24gdW5ob29rQ2FudmFzRnJvbUVsZW1lbnQoKXtcclxuXHRlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIGF0dGFjaENhbnZhc1RvRWxlbWVudCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGhvb2tFbGVtZW50VG9DYW52YXMoKXtcclxuXHRjYW52YXNDb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgYXR0YWNoRWxlbWVudFRvQ2FudmFzKTtcclxufVxyXG5cclxuZnVuY3Rpb24gdW5ob29rRWxlbWVudEZyb21DYW52YXMoKXtcclxuXHRjYW52YXNDb250YWluZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgYXR0YWNoRWxlbWVudFRvQ2FudmFzKTtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG5cdGluaXRWYXJpYWJsZXM6IGluaXRWYXJpYWJsZXMsXHJcblx0aG9va0NhbnZhc1RvRWxlbWVudDogaG9va0NhbnZhc1RvRWxlbWVudCxcclxuXHR1bmhvb2tDYW52YXNGcm9tRWxlbWVudDogdW5ob29rQ2FudmFzRnJvbUVsZW1lbnQsXHJcblx0aG9va0VsZW1lbnRUb0NhbnZhczogaG9va0VsZW1lbnRUb0NhbnZhcyxcclxuXHR1bmhvb2tFbGVtZW50RnJvbUNhbnZhczogdW5ob29rRWxlbWVudEZyb21DYW52YXNcclxufSJdfQ==
