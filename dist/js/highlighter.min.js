(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

// calibaration algorithms for x and Y positions of points
exports.default = function () {

	function calibarateX(clientX, parents, canvasContainer, calibarationLevel, lang) {
		var elementX = clientX;
		elementX = calibarateElementX(elementX, parents);
		elementX = calibarateScrollLeft(elementX, parents, canvasContainer);
		elementX = calibarateScaleX(elementX, canvasContainer, calibarationLevel, lang);
		return elementX;
	}

	function calibarateY(clientY, parents, canvasContainer, calibarationLevel, transformOriginY) {
		var elementY = clientY;
		elementY = calibarateElementY(elementY, parents);
		elementY = calibarateScrollTop(elementY, parents, canvasContainer);
		elementY = calibarateScaleY(elementY, canvasContainer, calibarationLevel, transformOriginY);
		return elementY;
	}

	// in case of absolute divs only - calculate left
	function calibarateElementX(clientX, parents) {
		var additions = 0;
		parents.each(function (number, element) {
			additions += element.offsetLeft;
		});
		return clientX - additions;
	}

	// in case of absolute divs only - calculate top
	function calibarateElementY(clientY, parents) {
		var additions = 0;
		parents.each(function (number, element) {
			additions += element.offsetTop;
		});
		return clientY - additions;
	}

	// calculate scroll left
	function calibarateScrollLeft(clientX, parents, container) {
		var initialWidth = container.offsetWidth;
		var scaledWidth = container.getBoundingClientRect().width;
		var widthDiff = scaledWidth - initialWidth;
		var scaleX = scaledWidth / initialWidth;
		scaleX = parseFloat(scaleX.toFixed(5));

		var additions = 0;
		parents.each(function (number, element) {
			if (element === container) {
				additions += element.scrollLeft + element.scrollLeft * (scaleX - 1);
			} else {
				additions += element.scrollLeft;
			}
		});
		return clientX + additions;
	}

	// calculate scroll top
	function calibarateScrollTop(clientY, parents, container) {
		var initialHeight = container.offsetHeight;
		var scaledHeight = container.getBoundingClientRect().height;
		var scaleY = scaledHeight / initialHeight;
		scaleY = parseFloat(scaleY.toFixed(5));

		var additions = 0;
		parents.each(function (number, element) {
			if (element === container) {
				additions += element.scrollTop + element.scrollTop * (scaleY - 1);
			} else {
				additions += element.scrollTop;
			}
		});
		return clientY + additions;
	}

	// calculate scale X
	function calibarateScaleX(clientX, container, calDegree, lang) {
		var initialWidth = container.offsetWidth;
		var scaledWidth = container.getBoundingClientRect().width;
		var widthDiff = scaledWidth - initialWidth;
		var scaleX = scaledWidth / initialWidth;
		scaleX = parseFloat(scaleX.toFixed(5));
		var calibaratedValue = 0;
		for (var calLevel = 0; calLevel <= calDegree; calLevel++) {
			calibaratedValue += clientX * Math.pow(1 - scaleX, calLevel);
		}

		if (lang === 'a') {
			// calibarate width
			for (var _calLevel = 0; _calLevel <= calDegree; _calLevel++) {
				calibaratedValue += widthDiff * Math.pow(1 - scaleX, _calLevel);
			}
			return calibaratedValue;
		}

		return calibaratedValue;
	}

	// calculate scale Y
	function calibarateScaleY(clientY, container, calDegree, transformOriginY) {
		var initialHeight = container.offsetHeight;
		var scaledHeight = container.getBoundingClientRect().height;
		transformOriginY = Number(transformOriginY);
		var transformOriginYCorrectionFactor = transformOriginY / (scaledHeight + transformOriginY);
		var scaleY = scaledHeight / initialHeight;
		scaleY = parseFloat(scaleY.toFixed(5));
		var calibaratedValue = 0;
		for (var calLevel = 0; calLevel <= calDegree; calLevel++) {
			calibaratedValue += clientY * Math.pow(1 - scaleY, calLevel);
		}
		for (var _calLevel2 = 1; _calLevel2 <= calDegree; _calLevel2++) {
			calibaratedValue -= transformOriginY * Math.pow(1 - scaleY, _calLevel2);
		}
		return calibaratedValue;
	}

	return {
		calibarateX: calibarateX,
		calibarateY: calibarateY
	};
}();

},{}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _calibartion = require('./calibartion.js');

var _calibartion2 = _interopRequireDefault(_calibartion);

var _functions = require('./functions.js');

var _functions2 = _interopRequireDefault(_functions);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
	putPoint: putPoint,
	startDrawing: startDrawing,
	drawLine: drawLine
};

// put a point on canvas

function putPoint(highlighter, elementX, elementY) {
	var context = highlighter.getContext();
	var radius = highlighter.getRadius();
	context.beginPath();
	context.arc(elementX, elementY, radius, 0, Math.PI * 2);
	context.fill();
}

// start paint on canvas
function startDrawing(event) {
	var parents = $(event.target).parents();
	var container = event.target.parentNode;
	var elementX = event.touches ? event.touches[0].clientX : event.pageX;
	var elementY = event.touches ? event.touches[0].clientY : event.pageY;
	var transformOriginY = $(container).css('transform-origin').split(' ')[1];
	var calibarationLevel = this.getCalibarationLevel();
	var lang = this.getLanguage();
	var context = this.getContext();
	transformOriginY = transformOriginY.replace('px', '');

	elementX = _calibartion2.default.calibarateX(elementX, parents, container, calibarationLevel, lang);
	elementY = _calibartion2.default.calibarateY(elementY, parents, container, calibarationLevel, transformOriginY);

	putPoint(this, elementX, elementY);
	context.beginPath();
	context.moveTo(elementX, elementY);
}

// draw lines on canvas
function drawLine(event) {
	var parents = $(event.target).parents();
	var container = event.target.parentNode;
	var elementX = event.touches ? event.touches[0].clientX : event.pageX;
	var elementY = event.touches ? event.touches[0].clientY : event.pageY;
	var transformOriginY = $(container).css('transform-origin').split(' ')[1];
	var calibarationLevel = this.getCalibarationLevel();
	var lang = this.getLanguage();
	transformOriginY = transformOriginY.replace('px', '');

	elementX = _calibartion2.default.calibarateX(elementX, parents, container, calibarationLevel, lang);
	elementY = _calibartion2.default.calibarateY(elementY, parents, container, calibarationLevel, transformOriginY);

	context.lineTo(elementX, elementY);
	context.stroke();
	putPoint(this, elementX, elementY);
	context.beginPath();
	context.moveTo(elementX, elementY);
}

},{"./calibartion.js":1,"./functions.js":3}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = {
	getPos: getPos
};

// get position of element

function getPos(el) {
	var elements = [];
	for (var lx = 0, ly = 0; el != null; lx += el.offsetLeft, ly += el.offsetTop, el = el.offsetParent) {
		elements.push(el);
	}
	console.log(elements);
	return { x: lx, y: ly, elements: elements };
}

},{}],4:[function(require,module,exports){
'use strict';

var _functions = require('./functions.js');

var _functions2 = _interopRequireDefault(_functions);

var _draw = require('./draw.js');

var _draw2 = _interopRequireDefault(_draw);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Highlighter = function ($) {

	function Highlighter(options) {
		this.options = options;
		initCanvasOnElement(this);
	}

	Highlighter.prototype.getElement = function () {
		return document.querySelector(this.options.element);
	};

	Highlighter.prototype.getCanvasElement = function () {
		return this.options.canvasElement;
	};

	Highlighter.prototype.getCanvasContainer = function () {
		return this.options.canvasContainer;
	};

	Highlighter.prototype.getWholeContainer = function () {
		return document.querySelector(this.options.container);
	};

	Highlighter.prototype.getZIndex = function () {
		return this.options.index || '1';
	};

	Highlighter.prototype.getCalibarationLevel = function () {
		return this.options.calibarationLevel || 10;
	};

	Highlighter.prototype.getLanguage = function () {
		return this.options.lang || 'e';
	};

	Highlighter.prototype.getRadius = function () {
		return this.options.radius || 10;
	};

	Highlighter.prototype.getContext = function () {
		return this.getCanvasElement().getContext('2d');
	};

	// initiate canvas on initiating highlighter object
	function initCanvasOnElement(highlighter) {
		var wholeContainer = highlighter.getWholeContainer();
		var element = highlighter.getElement();
		var canvasElement = document.createElement('canvas');
		var canvasContainer = document.createElement('div');

		wholeContainer.style.position = wholeContainer.style.position != 'absolute' ? 'relative' : 'absolute';

		// Adjust canvas container dimensions with none scaled element
		canvasContainerAdjustDimensions(highlighter, canvasContainer, element);

		// Adjust canvas dimensions
		canvasElementAdjustDimensions(canvasElement, element);

		// add highlighter
		canvasContainer.appendChild(canvasElement);
		wholeContainer.appendChild(canvasContainer);
		highlighter.options.canvasContainer = canvasContainer;
		highlighter.options.canvasElement = canvasElement;

		// bind canvas to element on scroll
		element.addEventListener('scroll', attachCanvasToElement.bind(highlighter));

		// initiate default canvas style
		initCanvasStyle(highlighter);

		// start draw on canvas
		canvasElement.addEventListener('click', _draw2.default.startDrawing.bind(highlighter));
	}

	// default canvas style
	function initCanvasStyle(highlighter) {
		var context = highlighter.getContext();
		var radius = highlighter.getRadius();
		context.lineCap = "round";
		context.lineJoin = "round";
		context.globalCompositeOperation = "source-over";
		context.strokeStyle = 'yellow';
		context.fillStyle = 'yellow';
		context.lineWidth = radius * 2;
	}

	// Adjust canvas container position and dimensions with none scaled element
	function canvasContainerAdjustDimensions(highlighter, canvasContainer, element) {
		var elementPositions = _functions2.default.getPos(element);
		canvasContainer.style.width = element.getBoundingClientRect().width + 'px';
		canvasContainer.style.height = element.getBoundingClientRect().height + 'px';
		canvasContainer.style.position = 'absolute';
		canvasContainer.style.overflow = 'auto';
		canvasContainer.style.left = elementPositions.x + 'px';
		canvasContainer.style.top = elementPositions.y + 'px';
		canvasContainer.style.zIndex = highlighter.getZIndex();
		canvasContainer.style.pointerEvents = 'none';
		window.addEventListener("resize", adjustCanvasOnResize.bind(highlighter));
	}

	// element on resize
	function adjustCanvasOnResize() {
		var canvasContainer = this.getCanvasContainer();
		var element = this.getElement();
		var elementPositions = _functions2.default.getPos(element);
		canvasContainer.style.left = elementPositions.x + 'px';
		canvasContainer.style.top = elementPositions.y + 'px';
	}

	// Adjust canvas element dimensions
	function canvasElementAdjustDimensions(canvasElement, element) {
		canvasElement.style.width = element.scrollWidth + 'px';
		canvasElement.width = element.scrollWidth;
		canvasElement.style.height = element.scrollHeight + 'px';
		canvasElement.height = element.scrollHeight;
	}

	//attach canvas to element
	function attachCanvasToElement(event) {
		var canvasContainer = this.getCanvasContainer();
		var element = this.getElement();
		canvasContainer.scrollTop = element.scrollTop;
		canvasContainer.scrollLeft = element.scrollLeft;
	}

	//attach element to canvas
	function attachElementToCanvas(event) {
		element.scrollTop = canvasContainer.scrollTop;
		element.scrollLeft = canvasContainer.scrollLeft;
	}

	window.Highlighter = Highlighter;

	return Highlighter;
}(jQuery);

},{"./draw.js":2,"./functions.js":3}]},{},[4])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvanMvY2FsaWJhcnRpb24uanMiLCJzcmMvanMvZHJhdy5qcyIsInNyYy9qcy9mdW5jdGlvbnMuanMiLCJzcmMvanMvaGlnaGxpZ2h0ZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7QUNBQTtrQkFDZ0IsWUFBVzs7QUFFMUIsVUFBUyxXQUFULENBQXFCLE9BQXJCLEVBQThCLE9BQTlCLEVBQXVDLGVBQXZDLEVBQXdELGlCQUF4RCxFQUEyRSxJQUEzRSxFQUFpRjtBQUNoRixNQUFJLFdBQVcsT0FBZjtBQUNBLGFBQVcsbUJBQW1CLFFBQW5CLEVBQTZCLE9BQTdCLENBQVg7QUFDQSxhQUFXLHFCQUFxQixRQUFyQixFQUErQixPQUEvQixFQUF3QyxlQUF4QyxDQUFYO0FBQ0EsYUFBVyxpQkFBaUIsUUFBakIsRUFBMkIsZUFBM0IsRUFBNEMsaUJBQTVDLEVBQStELElBQS9ELENBQVg7QUFDQSxTQUFPLFFBQVA7QUFDQTs7QUFFRCxVQUFTLFdBQVQsQ0FBcUIsT0FBckIsRUFBOEIsT0FBOUIsRUFBdUMsZUFBdkMsRUFBd0QsaUJBQXhELEVBQTJFLGdCQUEzRSxFQUE2RjtBQUM1RixNQUFJLFdBQVcsT0FBZjtBQUNBLGFBQVcsbUJBQW1CLFFBQW5CLEVBQTZCLE9BQTdCLENBQVg7QUFDQSxhQUFXLG9CQUFvQixRQUFwQixFQUE4QixPQUE5QixFQUF1QyxlQUF2QyxDQUFYO0FBQ0EsYUFBVyxpQkFBaUIsUUFBakIsRUFBMkIsZUFBM0IsRUFBNEMsaUJBQTVDLEVBQStELGdCQUEvRCxDQUFYO0FBQ0EsU0FBTyxRQUFQO0FBQ0E7O0FBRUQ7QUFDQSxVQUFTLGtCQUFULENBQTRCLE9BQTVCLEVBQXFDLE9BQXJDLEVBQThDO0FBQzdDLE1BQUksWUFBWSxDQUFoQjtBQUNBLFVBQVEsSUFBUixDQUFhLFVBQVMsTUFBVCxFQUFp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TUF4SWUsQ0FBbEIiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiLy8gY2FsaWJhcmF0aW9uIGFsZ29yaXRobXMgZm9yIHggYW5kIFkgcG9zaXRpb25zIG9mIHBvaW50c1xuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uKCkge1xuXG5cdGZ1bmN0aW9uIGNhbGliYXJhdGVYKGNsaWVudFgsIHBhcmVudHMsIGNhbnZhc0NvbnRhaW5lciwgY2FsaWJhcmF0aW9uTGV2ZWwsIGxhbmcpIHtcblx0XHR2YXIgZWxlbWVudFggPSBjbGllbnRYO1xuXHRcdGVsZW1lbnRYID0gY2FsaWJhcmF0ZUVsZW1lbnRYKGVsZW1lbnRYLCBwYXJlbnRzKTtcblx0XHRlbGVtZW50WCA9IGNhbGliYXJhdGVTY3JvbGxMZWZ0KGVsZW1lbnRYLCBwYXJlbnRzLCBjYW52YXNDb250YWluZXIpO1xuXHRcdGVsZW1lbnRYID0gY2FsaWJhcmF0ZVNjYWxlWChlbGVtZW50WCwgY2FudmFzQ29udGFpbmVyLCBjYWxpYmFyYXRpb25MZXZlbCwgbGFuZyk7XG5cdFx0cmV0dXJuIGVsZW1lbnRYO1xuXHR9XG5cblx0ZnVuY3Rpb24gY2FsaWJhcmF0ZVkoY2xpZW50WSwgcGFyZW50cywgY2FudmFzQ29udGFpbmVyLCBjYWxpYmFyYXRpb25MZXZlbCwgdHJhbnNmb3JtT3JpZ2luWSkge1xuXHRcdHZhciBlbGVtZW50WSA9IGNsaWVudFk7XG5cdFx0ZWxlbWVudFkgPSBjYWxpYmFyYXRlRWxlbWVudFkoZWxlbWVudFksIHBhcmVudHMpO1xuXHRcdGVsZW1lbnRZID0gY2FsaWJhcmF0ZVNjcm9sbFRvcChlbGVtZW50WSwgcGFyZW50cywgY2FudmFzQ29udGFpbmVyKTtcblx0XHRlbGVtZW50WSA9IGNhbGliYXJhdGVTY2FsZVkoZWxlbWVudFksIGNhbnZhc0NvbnRhaW5lciwgY2FsaWJhcmF0aW9uTGV2ZWwsIHRyYW5zZm9ybU9yaWdpblkpO1xuXHRcdHJldHVybiBlbGVtZW50WTtcblx0fVxuXG5cdC8vIGluIGNhc2Ugb2YgYWJzb2x1dGUgZGl2cyBvbmx5IC0gY2FsY3VsYXRlIGxlZnRcblx0ZnVuY3Rpb24gY2FsaWJhcmF0ZUVsZW1lbnRYKGNsaWVudFgsIHBhcmVudHMpIHtcblx0XHR2YXIgYWRkaXRpb25zID0gMDtcblx0XHRwYXJlbnRzLmVhY2goZnVuY3Rpb24obnVtYmVyLCBlbGVtZW50KSB7XG5cdFx0XHRhZGRpdGlvbnMgKz0gZWxlbWVudC5vZmZzZXRMZWZ0O1xuXHRcdH0pO1xuXHRcdHJldHVybiBjbGllbnRYIC0gYWRkaXRpb25zO1xuXHR9XG5cblx0Ly8gaW4gY2FzZSBvZiBhYnNvbHV0ZSBkaXZzIG9ubHkgLSBjYWxjdWxhdGUgdG9wXG5cdGZ1bmN0aW9uIGNhbGliYXJhdGVFbGVtZW50WShjbGllbnRZLCBwYXJlbnRzKSB7XG5cdFx0dmFyIGFkZGl0aW9ucyA9IDA7XG5cdFx0cGFyZW50cy5lYWNoKGZ1bmN0aW9uKG51bWJlciwgZWxlbWVudCkge1xuXHRcdFx0YWRkaXRpb25zICs9IGVsZW1lbnQub2Zmc2V0VG9wO1xuXHRcdH0pO1xuXHRcdHJldHVybiBjbGllbnRZIC0gYWRkaXRpb25zO1xuXHR9XG5cblx0Ly8gY2FsY3VsYXRlIHNjcm9sbCBsZWZ0XG5cdGZ1bmN0aW9uIGNhbGliYXJhdGVTY3JvbGxMZWZ0KGNsaWVudFgsIHBhcmVudHMsIGNvbnRhaW5lcikge1xuXHRcdHZhciBpbml0aWFsV2lkdGggPSBjb250YWluZXIub2Zmc2V0V2lkdGg7XG5cdFx0dmFyIHNjYWxlZFdpZHRoID0gY29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoO1xuXHRcdHZhciB3aWR0aERpZmYgPSBzY2FsZWRXaWR0aCAtIGluaXRpYWxXaWR0aDtcblx0XHR2YXIgc2NhbGVYID0gc2NhbGVkV2lkdGggLyBpbml0aWFsV2lkdGg7XG5cdFx0c2NhbGVYID0gcGFyc2VGbG9hdChzY2FsZVgudG9GaXhlZCg1KSk7XG5cblx0XHR2YXIgYWRkaXRpb25zID0gMDtcblx0XHRwYXJlbnRzLmVhY2goZnVuY3Rpb24obnVtYmVyLCBlbGVtZW50KSB7XG5cdFx0XHRpZiAoZWxlbWVudCA9PT0gY29udGFpbmVyKSB7XG5cdFx0XHRcdGFkZGl0aW9ucyArPSBlbGVtZW50LnNjcm9sbExlZnQgKyBlbGVtZW50LnNjcm9sbExlZnQgKiAoc2NhbGVYIC0gMSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRhZGRpdGlvbnMgKz0gZWxlbWVudC5zY3JvbGxMZWZ0O1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdHJldHVybiBjbGllbnRYICsgYWRkaXRpb25zO1xuXHR9XG5cblx0Ly8gY2FsY3VsYXRlIHNjcm9sbCB0b3Bcblx0ZnVuY3Rpb24gY2FsaWJhcmF0ZVNjcm9sbFRvcChjbGllbnRZLCBwYXJlbnRzLCBjb250YWluZXIpIHtcblx0XHR2YXIgaW5pdGlhbEhlaWdodCA9IGNvbnRhaW5lci5vZmZzZXRIZWlnaHQ7XG5cdFx0dmFyIHNjYWxlZEhlaWdodCA9IGNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQ7XG5cdFx0dmFyIHNjYWxlWSA9IHNjYWxlZEhlaWdodCAvIGluaXRpYWxIZWlnaHQ7XG5cdFx0c2NhbGVZID0gcGFyc2VGbG9hdChzY2FsZVkudG9GaXhlZCg1KSk7XG5cblx0XHR2YXIgYWRkaXRpb25zID0gMDtcblx0XHRwYXJlbnRzLmVhY2goZnVuY3Rpb24obnVtYmVyLCBlbGVtZW50KSB7XG5cdFx0XHRpZiAoZWxlbWVudCA9PT0gY29udGFpbmVyKSB7XG5cdFx0XHRcdGFkZGl0aW9ucyArPSBlbGVtZW50LnNjcm9sbFRvcCArIGVsZW1lbnQuc2Nyb2xsVG9wICogKHNjYWxlWSAtIDEpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0YWRkaXRpb25zICs9IGVsZW1lbnQuc2Nyb2xsVG9wO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdHJldHVybiBjbGllbnRZICsgYWRkaXRpb25zO1xuXHR9XG5cblx0Ly8gY2FsY3VsYXRlIHNjYWxlIFhcblx0ZnVuY3Rpb24gY2FsaWJhcmF0ZVNjYWxlWChjbGllbnRYLCBjb250YWluZXIsIGNhbERlZ3JlZSwgbGFuZykge1xuXHRcdHZhciBpbml0aWFsV2lkdGggPSBjb250YWluZXIub2Zmc2V0V2lkdGg7XG5cdFx0dmFyIHNjYWxlZFdpZHRoID0gY29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoO1xuXHRcdHZhciB3aWR0aERpZmYgPSBzY2FsZWRXaWR0aCAtIGluaXRpYWxXaWR0aDtcblx0XHR2YXIgc2NhbGVYID0gc2NhbGVkV2lkdGggLyBpbml0aWFsV2lkdGg7XG5cdFx0c2NhbGVYID0gcGFyc2VGbG9hdChzY2FsZVgudG9GaXhlZCg1KSk7XG5cdFx0dmFyIGNhbGliYXJhdGVkVmFsdWUgPSAwO1xuXHRcdGZvciAodmFyIGNhbExldmVsID0gMDsgY2FsTGV2ZWwgPD0gY2FsRGVncmVlOyBjYWxMZXZlbCsrKSB7XG5cdFx0XHRjYWxpYmFyYXRlZFZhbHVlICs9IGNsaWVudFggKiBNYXRoLnBvdygxIC0gc2NhbGVYLCBjYWxMZXZlbCk7XG5cdFx0fVxuXG5cdFx0aWYgKGxhbmcgPT09ICdhJykge1xuXHRcdFx0Ly8gY2FsaWJhcmF0ZSB3aWR0aFxuXHRcdFx0Zm9yICh2YXIgX2NhbExldmVsID0gMDsgX2NhbExldmVsIDw9IGNhbERlZ3JlZTsgX2NhbExldmVsKyspIHtcblx0XHRcdFx0Y2FsaWJhcmF0ZWRWYWx1ZSArPSB3aWR0aERpZmYgKiBNYXRoLnBvdygxIC0gc2NhbGVYLCBfY2FsTGV2ZWwpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGNhbGliYXJhdGVkVmFsdWU7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNhbGliYXJhdGVkVmFsdWU7XG5cdH1cblxuXHQvLyBjYWxjdWxhdGUgc2NhbGUgWVxuXHRmdW5jdGlvbiBjYWxpYmFyYXRlU2NhbGVZKGNsaWVudFksIGNvbnRhaW5lciwgY2FsRGVncmVlLCB0cmFuc2Zvcm1PcmlnaW5ZKSB7XG5cdFx0dmFyIGluaXRpYWxIZWlnaHQgPSBjb250YWluZXIub2Zmc2V0SGVpZ2h0O1xuXHRcdHZhciBzY2FsZWRIZWlnaHQgPSBjb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0O1xuXHRcdHRyYW5zZm9ybU9yaWdpblkgPSBOdW1iZXIodHJhbnNmb3JtT3JpZ2luWSk7XG5cdFx0dmFyIHRyYW5zZm9ybU9yaWdpbllDb3JyZWN0aW9uRmFjdG9yID0gdHJhbnNmb3JtT3JpZ2luWSAvIChzY2FsZWRIZWlnaHQgKyB0cmFuc2Zvcm1PcmlnaW5ZKTtcblx0XHR2YXIgc2NhbGVZID0gc2NhbGVkSGVpZ2h0IC8gaW5pdGlhbEhlaWdodDtcblx0XHRzY2FsZVkgPSBwYXJzZUZsb2F0KHNjYWxlWS50b0ZpeGVkKDUpKTtcblx0XHR2YXIgY2FsaWJhcmF0ZWRWYWx1ZSA9IDA7XG5cdFx0Zm9yICh2YXIgY2FsTGV2ZWwgPSAwOyBjYWxMZXZlbCA8PSBjYWxEZWdyZWU7IGNhbExldmVsKyspIHtcblx0XHRcdGNhbGliYXJhdGVkVmFsdWUgKz0gY2xpZW50WSAqIE1hdGgucG93KDEgLSBzY2FsZVksIGNhbExldmVsKTtcblx0XHR9XG5cdFx0Zm9yICh2YXIgX2NhbExldmVsMiA9IDE7IF9jYWxMZXZlbDIgPD0gY2FsRGVncmVlOyBfY2FsTGV2ZWwyKyspIHtcblx0XHRcdGNhbGliYXJhdGVkVmFsdWUgLT0gdHJhbnNmb3JtT3JpZ2luWSAqIE1hdGgucG93KDEgLSBzY2FsZVksIF9jYWxMZXZlbDIpO1xuXHRcdH1cblx0XHRyZXR1cm4gY2FsaWJhcmF0ZWRWYWx1ZTtcblx0fVxuXG5cdHJldHVybiB7XG5cdFx0Y2FsaWJhcmF0ZVg6IGNhbGliYXJhdGVYLFxuXHRcdGNhbGliYXJhdGVZOiBjYWxpYmFyYXRlWVxuXHR9XG5cbn0oKSk7XG4iLCJpbXBvcnQgY2FsaWJhcnRpb24gZnJvbSAnLi9jYWxpYmFydGlvbi5qcyc7XG5pbXBvcnQgZnVuY3Rpb25zIGZyb20gJy4vZnVuY3Rpb25zLmpzJztcblxuZXhwb3J0IGRlZmF1bHQge1xuXHRwdXRQb2ludDogcHV0UG9pbnQsXG5cdHN0YXJ0RHJhd2luZzogc3RhcnREcmF3aW5nLFxuXHRkcmF3TGluZTogZHJhd0xpbmVcbn1cblxuLy8gcHV0IGEgcG9pbnQgb24gY2FudmFzXG5mdW5jdGlvbiBwdXRQb2ludChoaWdobGlnaHRlciwgZWxlbWVudFgsIGVsZW1lbnRZKSB7XG5cdHZhciBjb250ZXh0ID0gaGlnaGxpZ2h0ZXIuZ2V0Q29udGV4dCgpO1xuXHR2YXIgcmFkaXVzID0gaGlnaGxpZ2h0ZXIuZ2V0UmFkaXVzKCk7XG5cdGNvbnRleHQuYmVnaW5QYXRoKCk7XG5cdGNvbnRleHQuYXJjKGVsZW1lbnRYLCBlbGVtZW50WSwgcmFkaXVzLCAwLCBNYXRoLlBJICogMik7XG5cdGNvbnRleHQuZmlsbCgpO1xufVxuXG4vLyBzdGFydCBwYWludCBvbiBjYW52YXNcbmZ1bmN0aW9uIHN0YXJ0RHJhd2luZyhldmVudCkge1xuXHR2YXIgcGFyZW50cyA9ICQoZXZlbnQudGFyZ2V0KS5wYXJlbnRzKCk7XG5cdHZhciBjb250YWluZXIgPSBldmVudC50YXJnZXQucGFyZW50Tm9kZTtcblx0dmFyIGVsZW1lbnRYID0gZXZlbnQudG91Y2hlcyA/IGV2ZW50LnRvdWNoZXNbMF0uY2xpZW50WCA6IGV2ZW50LnBhZ2VYO1xuXHR2YXIgZWxlbWVudFkgPSBldmVudC50b3VjaGVzID8gZXZlbnQudG91Y2hlc1swXS5jbGllbnRZIDogZXZlbnQucGFnZVk7XG5cdHZhciB0cmFuc2Zvcm1PcmlnaW5ZID0gJChjb250YWluZXIpLmNzcygndHJhbnNmb3JtLW9yaWdpbicpLnNwbGl0KCcgJylbMV07XG5cdHZhciBjYWxpYmFyYXRpb25MZXZlbCA9IHRoaXMuZ2V0Q2FsaWJhcmF0aW9uTGV2ZWwoKTtcblx0dmFyIGxhbmcgPSB0aGlzLmdldExhbmd1YWdlKCk7XG5cdHZhciBjb250ZXh0ID0gdGhpcy5nZXRDb250ZXh0KCk7XG5cdHRyYW5zZm9ybU9yaWdpblkgPSB0cmFuc2Zvcm1PcmlnaW5ZLnJlcGxhY2UoJ3B4JywgJycpO1xuXG5cdGVsZW1lbnRYID0gY2FsaWJhcnRpb24uY2FsaWJhcmF0ZVgoZWxlbWVudFgsIHBhcmVudHMsIGNvbnRhaW5lciwgY2FsaWJhcmF0aW9uTGV2ZWwsIGxhbmcpO1xuXHRlbGVtZW50WSA9IGNhbGliYXJ0aW9uLmNhbGliYXJhdGVZKGVsZW1lbnRZLCBwYXJlbnRzLCBjb250YWluZXIsIGNhbGliYXJhdGlvbkxldmVsLCB0cmFuc2Zvcm1PcmlnaW5ZKTtcblxuXHRwdXRQb2ludCh0aGlzLCBlbGVtZW50WCwgZWxlbWVudFkpO1xuXHRjb250ZXh0LmJlZ2luUGF0aCgpO1xuXHRjb250ZXh0Lm1vdmVUbyhlbGVtZW50WCwgZWxlbWVudFkpO1xufVxuXG4vLyBkcmF3IGxpbmVzIG9uIGNhbnZhc1xuZnVuY3Rpb24gZHJhd0xpbmUoZXZlbnQpIHtcblx0dmFyIHBhcmVudHMgPSAkKGV2ZW50LnRhcmdldCkucGFyZW50cygpO1xuXHR2YXIgY29udGFpbmVyID0gZXZlbnQudGFyZ2V0LnBhcmVudE5vZGU7XG5cdHZhciBlbGVtZW50WCA9IGV2ZW50LnRvdWNoZXMgPyBldmVudC50b3VjaGVzWzBdLmNsaWVudFggOiBldmVudC5wYWdlWDtcblx0dmFyIGVsZW1lbnRZID0gZXZlbnQudG91Y2hlcyA/IGV2ZW50LnRvdWNoZXNbMF0uY2xpZW50WSA6IGV2ZW50LnBhZ2VZO1xuXHR2YXIgdHJhbnNmb3JtT3JpZ2luWSA9ICQoY29udGFpbmVyKS5jc3MoJ3RyYW5zZm9ybS1vcmlnaW4nKS5zcGxpdCgnICcpWzFdO1xuXHR2YXIgY2FsaWJhcmF0aW9uTGV2ZWwgPSB0aGlzLmdldENhbGliYXJhdGlvbkxldmVsKCk7XG5cdHZhciBsYW5nID0gdGhpcy5nZXRMYW5ndWFnZSgpO1xuXHR0cmFuc2Zvcm1PcmlnaW5ZID0gdHJhbnNmb3JtT3JpZ2luWS5yZXBsYWNlKCdweCcsICcnKTtcblxuXHRlbGVtZW50WCA9IGNhbGliYXJ0aW9uLmNhbGliYXJhdGVYKGVsZW1lbnRYLCBwYXJlbnRzLCBjb250YWluZXIsIGNhbGliYXJhdGlvbkxldmVsLCBsYW5nKTtcblx0ZWxlbWVudFkgPSBjYWxpYmFydGlvbi5jYWxpYmFyYXRlWShlbGVtZW50WSwgcGFyZW50cywgY29udGFpbmVyLCBjYWxpYmFyYXRpb25MZXZlbCwgdHJhbnNmb3JtT3JpZ2luWSk7XG5cblx0Y29udGV4dC5saW5lVG8oZWxlbWVudFgsIGVsZW1lbnRZKTtcblx0Y29udGV4dC5zdHJva2UoKTtcblx0cHV0UG9pbnQodGhpcywgZWxlbWVudFgsIGVsZW1lbnRZKTtcblx0Y29udGV4dC5iZWdpblBhdGgoKTtcblx0Y29udGV4dC5tb3ZlVG8oZWxlbWVudFgsIGVsZW1lbnRZKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IHtcblx0Z2V0UG9zOiBnZXRQb3Ncbn1cblxuLy8gZ2V0IHBvc2l0aW9uIG9mIGVsZW1lbnRcbmZ1bmN0aW9uIGdldFBvcyhlbCkge1xuXHRsZXQgZWxlbWVudHMgPSBbXTtcblx0Zm9yICh2YXIgbHggPSAwLCBseSA9IDA7IGVsICE9IG51bGw7IGx4ICs9IGVsLm9mZnNldExlZnQsIGx5ICs9IGVsLm9mZnNldFRvcCwgZWwgPSBlbC5vZmZzZXRQYXJlbnQpe1xuXHRcdGVsZW1lbnRzLnB1c2goZWwpO1xuXHR9XG5cdGNvbnNvbGUubG9nKGVsZW1lbnRzKTtcblx0cmV0dXJuIHsgeDogbHgsIHk6IGx5LCBlbGVtZW50czogZWxlbWVudHMgfTtcbn1cbiIsImltcG9ydCBmdW5jdGlvbnMgZnJvbSAnLi9mdW5jdGlvbnMuanMnO1xuaW1wb3J0IGRyYXcgZnJvbSAnLi9kcmF3LmpzJztcblxuXG52YXIgSGlnaGxpZ2h0ZXIgPSAoZnVuY3Rpb24oJCkge1xuXG5cdGZ1bmN0aW9uIEhpZ2hsaWdodGVyKG9wdGlvbnMpIHtcblx0XHR0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXHRcdGluaXRDYW52YXNPbkVsZW1lbnQodGhpcyk7XG5cdH1cblxuXHRIaWdobGlnaHRlci5wcm90b3R5cGUuZ2V0RWxlbWVudCA9IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRoaXMub3B0aW9ucy5lbGVtZW50KTtcblx0fTtcblxuXHRIaWdobGlnaHRlci5wcm90b3R5cGUuZ2V0Q2FudmFzRWxlbWVudCA9IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm9wdGlvbnMuY2FudmFzRWxlbWVudDtcblx0fTtcblxuXHRIaWdobGlnaHRlci5wcm90b3R5cGUuZ2V0Q2FudmFzQ29udGFpbmVyID0gZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMub3B0aW9ucy5jYW52YXNDb250YWluZXI7XG5cdH07XG5cblx0SGlnaGxpZ2h0ZXIucHJvdG90eXBlLmdldFdob2xlQ29udGFpbmVyID0gZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGhpcy5vcHRpb25zLmNvbnRhaW5lcik7XG5cdH07XG5cblx0SGlnaGxpZ2h0ZXIucHJvdG90eXBlLmdldFpJbmRleCA9IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm9wdGlvbnMuaW5kZXggfHwgJzEnO1xuXHR9O1xuXG5cdEhpZ2hsaWdodGVyLnByb3RvdHlwZS5nZXRDYWxpYmFyYXRpb25MZXZlbCA9IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm9wdGlvbnMuY2FsaWJhcmF0aW9uTGV2ZWwgfHwgMTA7XG5cdH07XG5cblx0SGlnaGxpZ2h0ZXIucHJvdG90eXBlLmdldExhbmd1YWdlID0gZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMub3B0aW9ucy5sYW5nIHx8ICdlJztcblx0fTtcblxuXHRIaWdobGlnaHRlci5wcm90b3R5cGUuZ2V0UmFkaXVzID0gZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMub3B0aW9ucy5yYWRpdXMgfHwgMTA7XG5cdH07XG5cblx0SGlnaGxpZ2h0ZXIucHJvdG90eXBlLmdldENvbnRleHQgPSBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5nZXRDYW52YXNFbGVtZW50KCkuZ2V0Q29udGV4dCgnMmQnKTtcblx0fTtcblxuXHQvLyBpbml0aWF0ZSBjYW52YXMgb24gaW5pdGlhdGluZyBoaWdobGlnaHRlciBvYmplY3Rcblx0ZnVuY3Rpb24gaW5pdENhbnZhc09uRWxlbWVudChoaWdobGlnaHRlcikge1xuXHRcdHZhciB3aG9sZUNvbnRhaW5lciA9IGhpZ2hsaWdodGVyLmdldFdob2xlQ29udGFpbmVyKCk7XG5cdFx0dmFyIGVsZW1lbnQgPSBoaWdobGlnaHRlci5nZXRFbGVtZW50KCk7XG5cdFx0dmFyIGNhbnZhc0VsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcblx0XHR2YXIgY2FudmFzQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cblx0XHR3aG9sZUNvbnRhaW5lci5zdHlsZS5wb3NpdGlvbiA9IHdob2xlQ29udGFpbmVyLnN0eWxlLnBvc2l0aW9uICE9ICdhYnNvbHV0ZScgPyAncmVsYXRpdmUnIDogJ2Fic29sdXRlJztcblxuXHRcdC8vIEFkanVzdCBjYW52YXMgY29udGFpbmVyIGRpbWVuc2lvbnMgd2l0aCBub25lIHNjYWxlZCBlbGVtZW50XG5cdFx0Y2FudmFzQ29udGFpbmVyQWRqdXN0RGltZW5zaW9ucyhoaWdobGlnaHRlciwgY2FudmFzQ29udGFpbmVyLCBlbGVtZW50KTtcblxuXHRcdC8vIEFkanVzdCBjYW52YXMgZGltZW5zaW9uc1xuXHRcdGNhbnZhc0VsZW1lbnRBZGp1c3REaW1lbnNpb25zKGNhbnZhc0VsZW1lbnQsIGVsZW1lbnQpO1xuXG5cdFx0Ly8gYWRkIGhpZ2hsaWdodGVyXG5cdFx0Y2FudmFzQ29udGFpbmVyLmFwcGVuZENoaWxkKGNhbnZhc0VsZW1lbnQpO1xuXHRcdHdob2xlQ29udGFpbmVyLmFwcGVuZENoaWxkKGNhbnZhc0NvbnRhaW5lcik7XG5cdFx0aGlnaGxpZ2h0ZXIub3B0aW9ucy5jYW52YXNDb250YWluZXIgPSBjYW52YXNDb250YWluZXI7XG5cdFx0aGlnaGxpZ2h0ZXIub3B0aW9ucy5jYW52YXNFbGVtZW50ID0gY2FudmFzRWxlbWVudDtcblxuXHRcdC8vIGJpbmQgY2FudmFzIHRvIGVsZW1lbnQgb24gc2Nyb2xsXG5cdFx0ZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBhdHRhY2hDYW52YXNUb0VsZW1lbnQuYmluZChoaWdobGlnaHRlcikpO1xuXG5cdFx0Ly8gaW5pdGlhdGUgZGVmYXVsdCBjYW52YXMgc3R5bGVcblx0XHRpbml0Q2FudmFzU3R5bGUoaGlnaGxpZ2h0ZXIpO1xuXG5cdFx0Ly8gc3RhcnQgZHJhdyBvbiBjYW52YXNcblx0XHRjYW52YXNFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZHJhdy5zdGFydERyYXdpbmcuYmluZChoaWdobGlnaHRlcikpO1xuXHR9XG5cblx0Ly8gZGVmYXVsdCBjYW52YXMgc3R5bGVcblx0ZnVuY3Rpb24gaW5pdENhbnZhc1N0eWxlKGhpZ2hsaWdodGVyKXtcblx0XHR2YXIgY29udGV4dCA9IGhpZ2hsaWdodGVyLmdldENvbnRleHQoKTtcblx0XHR2YXIgcmFkaXVzID0gaGlnaGxpZ2h0ZXIuZ2V0UmFkaXVzKCk7XG5cdFx0Y29udGV4dC5saW5lQ2FwID0gXCJyb3VuZFwiO1xuXHRcdGNvbnRleHQubGluZUpvaW4gPSBcInJvdW5kXCI7XG5cdFx0Y29udGV4dC5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb24gPSBcInNvdXJjZS1vdmVyXCI7XG5cdFx0Y29udGV4dC5zdHJva2VTdHlsZSA9ICd5ZWxsb3cnO1xuXHRcdGNvbnRleHQuZmlsbFN0eWxlID0gJ3llbGxvdyc7XG5cdFx0Y29udGV4dC5saW5lV2lkdGggPSByYWRpdXMgKiAyO1xuXHR9XG5cblx0Ly8gQWRqdXN0IGNhbnZhcyBjb250YWluZXIgcG9zaXRpb24gYW5kIGRpbWVuc2lvbnMgd2l0aCBub25lIHNjYWxlZCBlbGVtZW50XG5cdGZ1bmN0aW9uIGNhbnZhc0NvbnRhaW5lckFkanVzdERpbWVuc2lvbnMoaGlnaGxpZ2h0ZXIsIGNhbnZhc0NvbnRhaW5lciwgZWxlbWVudCkge1xuXHRcdGxldCBlbGVtZW50UG9zaXRpb25zID0gZnVuY3Rpb25zLmdldFBvcyhlbGVtZW50KTtcblx0XHRjYW52YXNDb250YWluZXIuc3R5bGUud2lkdGggPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoICsgJ3B4Jztcblx0XHRjYW52YXNDb250YWluZXIuc3R5bGUuaGVpZ2h0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQgKyAncHgnO1xuXHRcdGNhbnZhc0NvbnRhaW5lci5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG5cdFx0Y2FudmFzQ29udGFpbmVyLnN0eWxlLm92ZXJmbG93ID0gJ2F1dG8nO1xuXHRcdGNhbnZhc0NvbnRhaW5lci5zdHlsZS5sZWZ0ID0gZWxlbWVudFBvc2l0aW9ucy54ICsgJ3B4Jztcblx0XHRjYW52YXNDb250YWluZXIuc3R5bGUudG9wID0gZWxlbWVudFBvc2l0aW9ucy55ICsgJ3B4Jztcblx0XHRjYW52YXNDb250YWluZXIuc3R5bGUuekluZGV4ID0gaGlnaGxpZ2h0ZXIuZ2V0WkluZGV4KCk7XG5cdFx0Y2FudmFzQ29udGFpbmVyLnN0eWxlLnBvaW50ZXJFdmVudHMgPSAnbm9uZSc7XG5cdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgYWRqdXN0Q2FudmFzT25SZXNpemUuYmluZChoaWdobGlnaHRlcikpO1xuXHR9XG5cblx0Ly8gZWxlbWVudCBvbiByZXNpemVcblx0ZnVuY3Rpb24gYWRqdXN0Q2FudmFzT25SZXNpemUoKXtcblx0XHR2YXIgY2FudmFzQ29udGFpbmVyID0gdGhpcy5nZXRDYW52YXNDb250YWluZXIoKTtcblx0XHR2YXIgZWxlbWVudCA9IHRoaXMuZ2V0RWxlbWVudCgpO1xuXHRcdGxldCBlbGVtZW50UG9zaXRpb25zID0gZnVuY3Rpb25zLmdldFBvcyhlbGVtZW50KTtcblx0XHRjYW52YXNDb250YWluZXIuc3R5bGUubGVmdCA9IGVsZW1lbnRQb3NpdGlvbnMueCArICdweCc7XG5cdFx0Y2FudmFzQ29udGFpbmVyLnN0eWxlLnRvcCA9IGVsZW1lbnRQb3NpdGlvbnMueSArICdweCc7XG5cdH1cblxuXHQvLyBBZGp1c3QgY2FudmFzIGVsZW1lbnQgZGltZW5zaW9uc1xuXHRmdW5jdGlvbiBjYW52YXNFbGVtZW50QWRqdXN0RGltZW5zaW9ucyhjYW52YXNFbGVtZW50LCBlbGVtZW50KSB7XG5cdFx0Y2FudmFzRWxlbWVudC5zdHlsZS53aWR0aCA9IGVsZW1lbnQuc2Nyb2xsV2lkdGggKyAncHgnO1xuXHRcdGNhbnZhc0VsZW1lbnQud2lkdGggPSBlbGVtZW50LnNjcm9sbFdpZHRoO1xuXHRcdGNhbnZhc0VsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gZWxlbWVudC5zY3JvbGxIZWlnaHQgKyAncHgnO1xuXHRcdGNhbnZhc0VsZW1lbnQuaGVpZ2h0ID0gZWxlbWVudC5zY3JvbGxIZWlnaHQ7XG5cdH1cblxuXHQvL2F0dGFjaCBjYW52YXMgdG8gZWxlbWVudFxuXHRmdW5jdGlvbiBhdHRhY2hDYW52YXNUb0VsZW1lbnQoZXZlbnQpe1xuXHRcdHZhciBjYW52YXNDb250YWluZXIgPSB0aGlzLmdldENhbnZhc0NvbnRhaW5lcigpO1xuXHRcdHZhciBlbGVtZW50ID0gdGhpcy5nZXRFbGVtZW50KCk7XG5cdFx0Y2FudmFzQ29udGFpbmVyLnNjcm9sbFRvcCA9IGVsZW1lbnQuc2Nyb2xsVG9wO1xuXHRcdGNhbnZhc0NvbnRhaW5lci5zY3JvbGxMZWZ0ID0gZWxlbWVudC5zY3JvbGxMZWZ0O1xuXHR9XG5cblx0Ly9hdHRhY2ggZWxlbWVudCB0byBjYW52YXNcblx0ZnVuY3Rpb24gYXR0YWNoRWxlbWVudFRvQ2FudmFzKGV2ZW50KXtcblx0XHRlbGVtZW50LnNjcm9sbFRvcCA9IGNhbnZhc0NvbnRhaW5lci5zY3JvbGxUb3A7XG5cdFx0ZWxlbWVudC5zY3JvbGxMZWZ0ID0gY2FudmFzQ29udGFpbmVyLnNjcm9sbExlZnQ7XG5cdH1cblxuXG5cdHdpbmRvdy5IaWdobGlnaHRlciA9IEhpZ2hsaWdodGVyO1xuXG5cdHJldHVybiBIaWdobGlnaHRlcjtcblxufSkoalF1ZXJ5KTsiXX0=
