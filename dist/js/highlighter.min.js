(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _initiation = require('./structure/initiation.js');

var _initiation2 = _interopRequireDefault(_initiation);

var _highlighteractivation = require('./structure/highlighteractivation.js');

var _highlighteractivation2 = _interopRequireDefault(_highlighteractivation);

var _drawstyles = require('./structure/drawstyles.js');

var _drawstyles2 = _interopRequireDefault(_drawstyles);

var _saveload = require('./structure/saveload.js');

var _saveload2 = _interopRequireDefault(_saveload);

var _functions = require('./structure/functions.js');

var _functions2 = _interopRequireDefault(_functions);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Highlighter = function () {
	function Highlighter(options) {
		_classCallCheck(this, Highlighter);

		this.options = options;
		this.events = {};
		this.imageData = '';
		_initiation2.default.initCanvas(this);
	}

	_createClass(Highlighter, [{
		key: 'getElement',
		value: function getElement() {
			var element = document.querySelector('#' + this.options.element);
			if (!_functions2.default.getFromHighlighterOptions(this, 'element') || !element) {
				throw 'element id not detected';
			}
			return element;
		}
	}, {
		key: 'getDrawType',
		value: function getDrawType() {
			var drawType = _functions2.default.getFromHighlighterOptions(this, 'drawType') || 'mouse';
			if (drawType == 'mouse') {
				this.mouseState = 0;
			}
			return drawType;
		}
	}, {
		key: 'getCanvasElement',
		value: function getCanvasElement() {
			return _functions2.default.getFromHighlighterOptions(this, 'canvasElement');
		}
	}, {
		key: 'getCanvasContainer',
		value: function getCanvasContainer() {
			return _functions2.default.getFromHighlighterOptions(this, 'canvasContainer');
		}
	}, {
		key: 'getCanvasContainerDimensions',
		value: function getCanvasContainerDimensions() {
			return _functions2.default.getFromHighlighterOptions(this, 'canvasContainerDimensions');
		}
	}, {
		key: 'getWholeContainer',
		value: function getWholeContainer() {
			return _functions2.default.getFromHighlighterOptions(this, 'container') ? document.querySelector(_functions2.default.getFromHighlighterOptions(this, 'container')) : document.querySelector('body');
		}
	}, {
		key: 'getZIndex',
		value: function getZIndex() {
			return _functions2.default.getFromHighlighterOptions(this, 'zIndex') || '1';
		}
	}, {
		key: 'getCalibarationLevel',
		value: function getCalibarationLevel() {
			return _functions2.default.getFromHighlighterOptions(this, 'calibarationLevel') || 10;
		}
	}, {
		key: 'getLanguage',
		value: function getLanguage() {
			return _functions2.default.getFromHighlighterOptions(this, 'lang') || 'e';
		}
	}, {
		key: 'getRadius',
		value: function getRadius() {
			return _functions2.default.getFromHighlighterOptions(this, 'radius') || 10;
		}
	}, {
		key: 'getContext',
		value: function getContext() {
			return this.getCanvasElement().getContext('2d');
		}
	}, {
		key: 'getOpacity',
		value: function getOpacity() {
			return _functions2.default.getFromHighlighterOptions(this, 'opacity');
		}
	}, {
		key: 'getColor',
		value: function getColor() {
			return _functions2.default.getFromHighlighterOptions(this, 'color') || 'yellow';
		}
	}, {
		key: 'activateHighlighter',
		value: function activateHighlighter() {
			_highlighteractivation2.default.activate(this);
		}
	}, {
		key: 'deactivateHighlighter',
		value: function deactivateHighlighter() {
			_highlighteractivation2.default.deactivate(this);
		}
	}, {
		key: 'startMarker',
		value: function startMarker() {
			_drawstyles2.default.initMarkStyle(this);
		}
	}, {
		key: 'startEraser',
		value: function startEraser() {
			_drawstyles2.default.initEraseStyle(this);
		}
	}, {
		key: 'clearCanvas',
		value: function clearCanvas() {
			_drawstyles2.default.clear(this);
		}
	}, {
		key: 'saveImage',
		value: function saveImage() {
			_saveload2.default.save(this);
		}
	}, {
		key: 'loadImage',
		value: function loadImage() {
			_saveload2.default.load(this);
		}
	}]);

	return Highlighter;
}();

window.Highlighter = Highlighter;

},{"./structure/drawstyles.js":5,"./structure/functions.js":6,"./structure/highlighteractivation.js":7,"./structure/initiation.js":8,"./structure/saveload.js":9}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

// calibaration algorithms for x and Y positions of points
exports.default = function () {

	function calibarateX(clientX, parents, canvasContainer, calibarationLevel, lang) {
		var elementX = clientX;
		elementX = calibarateElementX(elementX, parents);
		elementX = calibarateScrollLeft(elementX, parents, canvasContainer);
		elementX = calibarateScaleX(elementX, canvasContainer, calibarationLevel, lang);
		return elementX;
	}

	function calibarateY(clientY, parents, canvasContainer, calibarationLevel, transformOriginY) {
		var elementY = clientY;
		elementY = calibarateElementY(elementY, parents);
		elementY = calibarateScrollTop(elementY, parents, canvasContainer);
		elementY = calibarateScaleY(elementY, canvasContainer, calibarationLevel, transformOriginY);
		return elementY;
	}

	// in case of absolute divs only - calculate left
	function calibarateElementX(clientX, parents) {
		var additions = 0,
		    accumOffsetLeft = 0;
		parents = parents.toArray().reverse();
		parents.forEach(function (element, number) {
			additions += element.getBoundingClientRect().left - accumOffsetLeft;
			accumOffsetLeft += element.getBoundingClientRect().left;
		});
		return clientX - additions;
	}

	// in case of absolute divs only - calculate top
	function calibarateElementY(clientY, parents) {
		var additions = 0,
		    accumOffsetTop = 0;
		parents = parents.toArray().reverse();
		parents.forEach(function (element, number) {
			additions += element.getBoundingClientRect().top - accumOffsetTop;
			accumOffsetTop += element.getBoundingClientRect().top;
		});
		return clientY - additions;
	}

	// calculate scroll left
	function calibarateScrollLeft(clientX, parents, container) {
		var initialWidth = container.offsetWidth,
		    scaledWidth = container.getBoundingClientRect().width,
		    widthDiff = scaledWidth - initialWidth,
		    scaleX = scaledWidth / initialWidth,
		    additions = 0;

		scaleX = parseFloat(scaleX.toFixed(5));

		parents.each(function (number, element) {
			if (element === container) {
				additions += element.scrollLeft + element.scrollLeft * (scaleX - 1);
			} else {
				additions += element.scrollLeft;
			}
		});
		return clientX + additions;
	}

	// calculate scroll top
	function calibarateScrollTop(clientY, parents, container) {
		var initialHeight = container.offsetHeight,
		    scaledHeight = container.getBoundingClientRect().height,
		    scaleY = scaledHeight / initialHeight,
		    additions = 0;

		scaleY = parseFloat(scaleY.toFixed(5));

		parents.each(function (number, element) {
			if (element === container) {
				additions += element.scrollTop + element.scrollTop * (scaleY - 1);
			} else {
				additions += element.scrollTop;
			}
		});
		return clientY + additions;
	}

	// calculate scale X
	function calibarateScaleX(clientX, container, calDegree, lang) {
		var initialWidth = container.offsetWidth,
		    scaledWidth = container.getBoundingClientRect().width,
		    widthDiff = scaledWidth - initialWidth,
		    scaleX = scaledWidth / initialWidth,
		    calibaratedValue = 0;

		scaleX = parseFloat(scaleX.toFixed(5));

		for (var calLevel = 0; calLevel <= calDegree; calLevel++) {
			calibaratedValue += clientX * Math.pow(1 - scaleX, calLevel);
		}

		if (lang === 'a') {
			// calibarate width
			for (var _calLevel = 0; _calLevel <= calDegree; _calLevel++) {
				calibaratedValue += widthDiff * Math.pow(1 - scaleX, _calLevel);
			}
			return calibaratedValue;
		}

		return calibaratedValue;
	}

	// calculate scale Y
	function calibarateScaleY(clientY, container, calDegree, transformOriginY) {
		transformOriginY = Number(transformOriginY);
		var initialHeight = container.offsetHeight,
		    scaledHeight = container.getBoundingClientRect().height,
		    transformOriginYCorrectionFactor = transformOriginY / (scaledHeight + transformOriginY),
		    scaleY = scaledHeight / initialHeight,
		    calibaratedValue = 0;

		scaleY = parseFloat(scaleY.toFixed(5));

		for (var calLevel = 0; calLevel <= calDegree; calLevel++) {
			calibaratedValue += clientY * Math.pow(1 - scaleY, calLevel);
		}
		for (var _calLevel2 = 1; _calLevel2 <= calDegree; _calLevel2++) {
			calibaratedValue -= transformOriginY * Math.pow(1 - scaleY, _calLevel2);
		}
		return calibaratedValue;
	}

	return {
		calibarateX: calibarateX,
		calibarateY: calibarateY
	};
}();

},{}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _functions = require("./functions.js");

var _functions2 = _interopRequireDefault(_functions);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// default canvas style
function initCanvasStyle(highlighter) {
	var context = highlighter.getContext(),
	    radius = highlighter.getRadius();

	context.lineCap = "round";
	context.lineJoin = "round";
	context.globalCompositeOperation = "source-over";
	context.strokeStyle = highlighter.getColor();
	context.fillStyle = highlighter.getColor();
	context.lineWidth = radius * 2;
}

// Adjust canvas container position and dimensions with none scaled element
function canvasContainerAdjust(highlighter, canvasContainer, element) {
	var elementPositions = _functions2.default.getPosition(element),
	    canvasContainerDimensions = {
		width: element.getBoundingClientRect().width,
		height: element.getBoundingClientRect().height,
		left: elementPositions.x,
		top: elementPositions.y
	};

	_functions2.default.addToHighlighterOptions(highlighter, 'canvasContainerDimensions', canvasContainerDimensions);

	canvasContainer.style.width = highlighter.getCanvasContainerDimensions().width + 'px';
	canvasContainer.style.height = highlighter.getCanvasContainerDimensions().height + 'px';
	canvasContainer.style.position = 'absolute';
	canvasContainer.style.overflow = 'auto';
	canvasContainer.style.left = highlighter.getCanvasContainerDimensions().left + 'px';
	canvasContainer.style.top = highlighter.getCanvasContainerDimensions().top + 'px';
	canvasContainer.style.zIndex = highlighter.getZIndex();
	canvasContainer.style.pointerEvents = 'none';
	window.addEventListener("resize", adjustCanvasOnResize.bind(highlighter));
}

// whole Container style
function wholeContainerAdjust(wholeContainer) {
	wholeContainer.style.position = wholeContainer.style.position != 'absolute' ? 'relative' : 'absolute';
}

// element on resize
function adjustCanvasOnResize() {
	var canvasContainer = this.getCanvasContainer(),
	    element = this.getElement(),
	    elementPositions = _functions2.default.getPosition(element);
	canvasContainer.style.left = elementPositions.x + 'px';
	canvasContainer.style.top = elementPositions.y + 'px';
}

// Adjust canvas element dimensions
function canvasElementAdjust(highlighter, canvasElement, element) {
	canvasElement.style.width = element.scrollWidth + 'px';
	canvasElement.style.display = 'block';
	canvasElement.style.position = 'absolute';
	canvasElement.style.left = '0px';
	canvasElement.style.right = '0px';
	canvasElement.style.zIndex = '1';
	canvasElement.style.cursor = 'pointer';
	canvasElement.width = element.scrollWidth;
	canvasElement.style.height = element.scrollHeight + 'px';
	canvasElement.height = element.scrollHeight;
	canvasElement.style.opacity = highlighter.getOpacity();
}

function init(highlighter, wholeContainer, canvasContainer, element, canvasElement) {
	wholeContainerAdjust(wholeContainer);
	canvasContainerAdjust(highlighter, canvasContainer, element);
	canvasElementAdjust(highlighter, canvasElement, element);
	initCanvasStyle(highlighter);
}

exports.default = {
	init: init
};

},{"./functions.js":6}],4:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _calibartion = require('./calibartion.js');

var _calibartion2 = _interopRequireDefault(_calibartion);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// put a point on canvas
function putPoint(highlighter, elementX, elementY) {
	var context = highlighter.getContext(),
	    radius = highlighter.getRadius();
	context.beginPath();
	context.arc(elementX, elementY, radius, 0, Math.PI * 2);
	context.fill();
}

// start paint on canvas
function startDrawing(event) {
	var parents = $(event.target).parents(),
	    container = event.target.parentNode,
	    elementX = event.touches ? event.touches[0].clientX : event.pageX,
	    elementY = event.touches ? event.touches[0].clientY : event.pageY,
	    transformOriginY = $(container).css('transform-origin').split(' ')[1],
	    calibarationLevel = this.getCalibarationLevel(),
	    lang = this.getLanguage(),
	    context = this.getContext();
	transformOriginY = transformOriginY.replace('px', '');

	elementX = _calibartion2.default.calibarateX(elementX, parents, container, calibarationLevel, lang);
	elementY = _calibartion2.default.calibarateY(elementY, parents, container, calibarationLevel, transformOriginY);

	putPoint(this, elementX, elementY);
	context.beginPath();
	context.moveTo(elementX, elementY);
	this.mouseState = 1;
}

function endDrawing() {
	this.mouseState = 0;
}

// draw lines on canvas
function drawLine(event) {
	var parents = $(event.target).parents(),
	    container = event.target.parentNode,
	    elementX = event.touches ? event.touches[0].clientX : event.pageX,
	    elementY = event.touches ? event.touches[0].clientY : event.pageY,
	    transformOriginY = $(container).css('transform-origin').split(' ')[1],
	    calibarationLevel = this.getCalibarationLevel(),
	    lang = this.getLanguage(),
	    context = this.getContext(),
	    drawType = this.getDrawType();
	transformOriginY = transformOriginY.replace('px', '');

	elementX = _calibartion2.default.calibarateX(elementX, parents, container, calibarationLevel, lang);
	elementY = _calibartion2.default.calibarateY(elementY, parents, container, calibarationLevel, transformOriginY);

	if (drawType == 'mouse') {
		if (event.which == 1 && this.mouseState == 0) {
			context.lineTo(elementX, elementY);
			context.stroke();
			putPoint(this, elementX, elementY);
			context.beginPath();
			context.moveTo(elementX, elementY);
		}
	} else {
		context.lineTo(elementX, elementY);
		context.stroke();
		putPoint(this, elementX, elementY);
		context.beginPath();
		context.moveTo(elementX, elementY);
	}
}

exports.default = {
	putPoint: putPoint,
	startDrawing: startDrawing,
	drawLine: drawLine,
	endDrawing: endDrawing
};

},{"./calibartion.js":2}],5:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
function initMarkStyle(highlighter) {
	var context = highlighter.getContext();
	context.globalCompositeOperation = "source-over";
}

function initEraseStyle(highlighter) {
	var context = highlighter.getContext();
	context.globalCompositeOperation = "destination-out";
}

function clear(highlighter) {
	var context = highlighter.getContext();
	var canvas = highlighter.getCanvasElement();
	context.clearRect(0, 0, canvas.width, canvas.height);
}

exports.default = {
	initMarkStyle: initMarkStyle,
	initEraseStyle: initEraseStyle,
	clear: clear
};

},{}],6:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
// get position of element
function getPos(el) {
	var elements = [];
	for (var _lx = 0, _ly = 0; el != null; _lx += el.offsetLeft, _ly += el.offsetTop, el = el.offsetParent) {
		elements.push(el);
	}
	return { x: lx, y: ly, elements: elements };
}

// Helper function to get an element's exact position
function getPosition(el) {
	var xPos = 0,
	    yPos = 0;

	while (el) {
		if (el.tagName == "BODY") {
			// deal with browser quirks with body/window/document and page scroll
			var xScroll = el.scrollLeft || document.documentElement.scrollLeft,
			    yScroll = el.scrollTop || document.documentElement.scrollTop;

			xPos += el.offsetLeft - xScroll + el.clientLeft;
			yPos += el.offsetTop - yScroll + el.clientTop;
		} else {
			// for all other non-BODY elements
			xPos += el.offsetLeft - el.scrollLeft + el.clientLeft;
			yPos += el.offsetTop - el.scrollTop + el.clientTop;
		}

		el = el.offsetParent;
	}
	return {
		x: xPos,
		y: yPos
	};
}

function addToHighlighterOptions(highlighter, key, value) {
	highlighter.options[key] = value;
}

function getFromHighlighterOptions(highlighter, key) {
	return highlighter.options[key];
}

exports.default = {
	getPos: getPos,
	getPosition: getPosition,
	addToHighlighterOptions: addToHighlighterOptions,
	getFromHighlighterOptions: getFromHighlighterOptions
};

},{}],7:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _scrollattach = require('./scrollattach.js');

var _scrollattach2 = _interopRequireDefault(_scrollattach);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var activeCanvasClass = 'active-canvas-highlighter';

function activate(highlighter) {
	var canvasContainer = highlighter.getCanvasContainer();
	var canvasElement = highlighter.getCanvasElement();
	canvasContainer.style.pointerEvents = 'auto';
	canvasElement.style.zIndex = '10';
	_scrollattach2.default.unhookCanvasFromElement(highlighter);
	_scrollattach2.default.hookElementToCanvas(highlighter);
}

function deactivate(highlighter) {
	var canvasContainer = highlighter.getCanvasContainer();
	var canvasElement = highlighter.getCanvasElement();
	canvasContainer.style.pointerEvents = 'none';
	canvasElement.style.zIndex = '1';
	_scrollattach2.default.hookCanvasToElement(highlighter);
	_scrollattach2.default.unhookElementFromCanvas(highlighter);
}

function initActiveCanvasStyle() {
	if (!document.getElementById('canvashighlighter')) {
		var style = document.createElement('style');
		style.type = 'text/css';
		style.id = 'canvashighlighter';
		style.innerHTML = 'canvas.' + activeCanvasClass + ' { z-index: 2 !important;}';
		document.getElementsByTagName('head')[0].appendChild(style);
	}
}

exports.default = {
	activate: activate,
	deactivate: deactivate,
	initActiveCanvasStyle: initActiveCanvasStyle,
	activeCanvasClass: activeCanvasClass
};

},{"./scrollattach.js":10}],8:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _draw = require('./draw.js');

var _draw2 = _interopRequireDefault(_draw);

var _functions = require('./functions.js');

var _functions2 = _interopRequireDefault(_functions);

var _canvasstyledimension = require('./canvasstyledimension.js');

var _canvasstyledimension2 = _interopRequireDefault(_canvasstyledimension);

var _scrollattach = require('./scrollattach.js');

var _scrollattach2 = _interopRequireDefault(_scrollattach);

var _highlighteractivation = require('./highlighteractivation.js');

var _highlighteractivation2 = _interopRequireDefault(_highlighteractivation);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// initiate canvas on initiating highlighter object
function initCanvas(highlighter) {
	var wholeContainer = highlighter.getWholeContainer(),
	    element = highlighter.getElement(),

	// build canvas
	canvasElement = document.createElement('canvas'),

	// build canvas container
	canvasContainer = buildCanvasContainer(highlighter);

	// append elements
	canvasContainer.appendChild(canvasElement);
	wholeContainer.appendChild(canvasContainer);

	// add to highlighter
	_functions2.default.addToHighlighterOptions(highlighter, 'canvasContainer', canvasContainer);
	_functions2.default.addToHighlighterOptions(highlighter, 'canvasElement', canvasElement);

	// init canvas styles and dimensions
	_canvasstyledimension2.default.init(highlighter, wholeContainer, canvasContainer, element, canvasElement);

	// bind canvas to element on scroll
	scrollAttachement(highlighter);

	// start draw on canvas
	drawCode(highlighter, canvasElement);

	// make canvas active class
	_highlighteractivation2.default.initActiveCanvasStyle();
}

function scrollAttachement(highlighter) {
	_scrollattach2.default.initVariables(highlighter);
	_scrollattach2.default.hookCanvasToElement(highlighter);
}

function drawCode(highlighter, canvasElement) {
	if (highlighter.getDrawType() == 'touch') {
		canvasElement.addEventListener('touchstart', _draw2.default.startDrawing.bind(highlighter), false);
		canvasElement.addEventListener('touchmove', _draw2.default.drawLine.bind(highlighter), false);
	} else {
		canvasElement.addEventListener('mousedown', _draw2.default.startDrawing.bind(highlighter), false);
		canvasElement.addEventListener('mousemove', _draw2.default.drawLine.bind(highlighter), false);
		canvasElement.addEventListener('mouseup', _draw2.default.endDrawing.bind(highlighter), false);
	}
}

function buildCanvasContainer(highlighter) {
	var canvasContainer = void 0,
	    canvasContainerId = '#' + makeCanvasContainerId(highlighter);
	if (!document.querySelector(canvasContainerId)) {
		canvasContainer = document.createElement('div');
		canvasContainer.setAttribute('id', makeCanvasContainerId(highlighter));
	} else {
		canvasContainer = document.querySelector(canvasContainerId);
	}
	return canvasContainer;
}

function makeCanvasContainerId(highlighter) {
	var elementId = highlighter.options.element,
	    canvasContainerId = elementId + '-canvasContainer';
	return canvasContainerId;
}

exports.default = {
	initCanvas: initCanvas
};

},{"./canvasstyledimension.js":3,"./draw.js":4,"./functions.js":6,"./highlighteractivation.js":7,"./scrollattach.js":10}],9:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _drawstyles = require('./drawstyles.js');

var _drawstyles2 = _interopRequireDefault(_drawstyles);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function save(highlighter) {
	var canvasElement = highlighter.getCanvasElement(),
	    imageData = canvasElement.toDataURL();
	highlighter.imageData = imageData;
	return imageData;
}

function load(highlighter) {
	if (highlighter.imageData) {
		(function () {
			_drawstyles2.default.clear(highlighter);
			_drawstyles2.default.initMarkStyle(highlighter);
			var canvasElement = highlighter.getCanvasElement(),
			    image = new Image();
			image.src = highlighter.imageData;
			image.onload = function () {
				canvasElement.getContext('2d').drawImage(image, 0, 0);
			};
		})();
	}
}

exports.default = {
	save: save,
	load: load
};

},{"./drawstyles.js":5}],10:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
var element = void 0,
    canvasContainer = void 0;

function attachCanvasToElementEvent() {
	canvasContainer.scrollTop = element.scrollTop;
	canvasContainer.scrollLeft = element.scrollLeft;
}

function attachElementToCanvasEvent() {
	element.scrollTop = canvasContainer.scrollTop;
	element.scrollLeft = canvasContainer.scrollLeft;
}

function initVariables(highlighter) {
	canvasContainer = highlighter.getCanvasContainer();
	element = highlighter.getElement();
	highlighter.events.attachCanvasToElementEvent = attachCanvasToElementEvent;
	highlighter.events.attachElementToCanvasEvent = attachElementToCanvasEvent;
}

function hookCanvasToElement(highlighter) {
	element.addEventListener('scroll', highlighter.events.attachCanvasToElementEvent);
}

function unhookCanvasFromElement(highlighter) {
	element.removeEventListener('scroll', highlighter.events.attachCanvasToElementEvent);
}

function hookElementToCanvas(highlighter) {
	canvasContainer.addEventListener('scroll', highlighter.events.attachElementToCanvasEvent);
}

function unhookElementFromCanvas(highlighter) {
	canvasContainer.removeEventListener('scroll', highlighter.events.attachElementToCanvasEvent);
}

exports.default = {
	initVariables: initVariables,
	hookCanvasToElement: hookCanvasToElement,
	unhookCanvasFromElement: unhookCanvasFromElement,
	hookElementToCanvas: hookElementToCanvas,
	unhookElementFromCanvas: unhookElementFromCanvas
};

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
