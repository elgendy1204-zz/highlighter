(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var _initiation = require('./structure/initiation.js');

var _initiation2 = _interopRequireDefault(_initiation);

var _highlighterActivation = require('./structure/highlighterActivation.js');

var _highlighterActivation2 = _interopRequireDefault(_highlighterActivation);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Highlighter = function ($) {

	function Highlighter(options) {
		this.options = options;
		_initiation2.default.initCanvasOnElement(this);
	}

	Highlighter.prototype.getElement = function () {
		return document.querySelector(this.options.element);
	};

	Highlighter.prototype.getCanvasElement = function () {
		return this.options.canvasElement;
	};

	Highlighter.prototype.getCanvasContainer = function () {
		return this.options.canvasContainer;
	};

	Highlighter.prototype.getWholeContainer = function () {
		return document.querySelector(this.options.container);
	};

	Highlighter.prototype.getZIndex = function () {
		return this.options.index || '1';
	};

	Highlighter.prototype.getCalibarationLevel = function () {
		return this.options.calibarationLevel || 10;
	};

	Highlighter.prototype.getLanguage = function () {
		return this.options.lang || 'e';
	};

	Highlighter.prototype.getRadius = function () {
		return this.options.radius || 10;
	};

	Highlighter.prototype.getContext = function () {
		return this.getCanvasElement().getContext('2d');
	};

	Highlighter.prototype.getOpacity = function () {
		return this.options.opacity;
	};

	Highlighter.prototype.getColor = function () {
		return this.options.color || 'yellow';
	};

	Highlighter.prototype.activateHighlighter = function () {
		_highlighterActivation2.default.activate(this);
	};

	Highlighter.prototype.deactivateHighlighter = function () {
		_highlighterActivation2.default.deactivate(this);
	};

	window.Highlighter = Highlighter;

	return Highlighter;
}(jQuery);

},{"./structure/highlighterActivation.js":6,"./structure/initiation.js":7}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

// calibaration algorithms for x and Y positions of points
exports.default = function () {

	function calibarateX(clientX, parents, canvasContainer, calibarationLevel, lang) {
		var elementX = clientX;
		elementX = calibarateElementX(elementX, parents);
		elementX = calibarateScrollLeft(elementX, parents, canvasContainer);
		elementX = calibarateScaleX(elementX, canvasContainer, calibarationLevel, lang);
		return elementX;
	}

	function calibarateY(clientY, parents, canvasContainer, calibarationLevel, transformOriginY) {
		var elementY = clientY;
		elementY = calibarateElementY(elementY, parents);
		elementY = calibarateScrollTop(elementY, parents, canvasContainer);
		elementY = calibarateScaleY(elementY, canvasContainer, calibarationLevel, transformOriginY);
		return elementY;
	}

	// in case of absolute divs only - calculate left
	function calibarateElementX(clientX, parents) {
		var additions = 0;
		var accumOffsetLeft = 0;
		parents = parents.toArray().reverse();
		parents.forEach(function (element, number) {
			additions += element.getBoundingClientRect().left - accumOffsetLeft;
			accumOffsetLeft += element.getBoundingClientRect().left;
		});
		return clientX - additions;
	}

	// in case of absolute divs only - calculate top
	function calibarateElementY(clientY, parents) {
		var additions = 0;
		var accumOffsetTop = 0;
		parents = parents.toArray().reverse();
		parents.forEach(function (element, number) {
			additions += element.getBoundingClientRect().top - accumOffsetTop;
			accumOffsetTop += element.getBoundingClientRect().top;
		});
		return clientY - additions;
	}

	// calculate scroll left
	function calibarateScrollLeft(clientX, parents, container) {
		var initialWidth = container.offsetWidth;
		var scaledWidth = container.getBoundingClientRect().width;
		var widthDiff = scaledWidth - initialWidth;
		var scaleX = scaledWidth / initialWidth;
		scaleX = parseFloat(scaleX.toFixed(5));

		var additions = 0;
		parents.each(function (number, element) {
			if (element === container) {
				additions += element.scrollLeft + element.scrollLeft * (scaleX - 1);
			} else {
				additions += element.scrollLeft;
			}
		});
		return clientX + additions;
	}

	// calculate scroll top
	function calibarateScrollTop(clientY, parents, container) {
		var initialHeight = container.offsetHeight;
		var scaledHeight = container.getBoundingClientRect().height;
		var scaleY = scaledHeight / initialHeight;
		scaleY = parseFloat(scaleY.toFixed(5));

		var additions = 0;
		parents.each(function (number, element) {
			if (element === container) {
				additions += element.scrollTop + element.scrollTop * (scaleY - 1);
			} else {
				additions += element.scrollTop;
			}
		});
		return clientY + additions;
	}

	// calculate scale X
	function calibarateScaleX(clientX, container, calDegree, lang) {
		var initialWidth = container.offsetWidth;
		var scaledWidth = container.getBoundingClientRect().width;
		var widthDiff = scaledWidth - initialWidth;
		var scaleX = scaledWidth / initialWidth;
		scaleX = parseFloat(scaleX.toFixed(5));
		var calibaratedValue = 0;
		for (var calLevel = 0; calLevel <= calDegree; calLevel++) {
			calibaratedValue += clientX * Math.pow(1 - scaleX, calLevel);
		}

		if (lang === 'a') {
			// calibarate width
			for (var _calLevel = 0; _calLevel <= calDegree; _calLevel++) {
				calibaratedValue += widthDiff * Math.pow(1 - scaleX, _calLevel);
			}
			return calibaratedValue;
		}

		return calibaratedValue;
	}

	// calculate scale Y
	function calibarateScaleY(clientY, container, calDegree, transformOriginY) {
		var initialHeight = container.offsetHeight;
		var scaledHeight = container.getBoundingClientRect().height;
		transformOriginY = Number(transformOriginY);
		var transformOriginYCorrectionFactor = transformOriginY / (scaledHeight + transformOriginY);
		var scaleY = scaledHeight / initialHeight;
		scaleY = parseFloat(scaleY.toFixed(5));
		var calibaratedValue = 0;
		for (var calLevel = 0; calLevel <= calDegree; calLevel++) {
			calibaratedValue += clientY * Math.pow(1 - scaleY, calLevel);
		}
		for (var _calLevel2 = 1; _calLevel2 <= calDegree; _calLevel2++) {
			calibaratedValue -= transformOriginY * Math.pow(1 - scaleY, _calLevel2);
		}
		return calibaratedValue;
	}

	return {
		calibarateX: calibarateX,
		calibarateY: calibarateY
	};
}();

},{}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _functions = require("./functions.js");

var _functions2 = _interopRequireDefault(_functions);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// default canvas style
function initCanvasStyle(highlighter) {
	var context = highlighter.getContext();
	var radius = highlighter.getRadius();
	context.lineCap = "round";
	context.lineJoin = "round";
	context.globalCompositeOperation = "source-over";
	context.strokeStyle = highlighter.getColor();
	context.fillStyle = highlighter.getColor();
	context.lineWidth = radius * 2;
}

// Adjust canvas container position and dimensions with none scaled element
function canvasContainerAdjustDimensions(highlighter, canvasContainer, element) {
	var elementPositions = _functions2.default.getPosition(element);
	canvasContainer.style.width = element.getBoundingClientRect().width + 'px';
	canvasContainer.style.height = element.getBoundingClientRect().height + 'px';
	canvasContainer.style.position = 'absolute';
	canvasContainer.style.overflow = 'auto';
	canvasContainer.style.left = elementPositions.x + 'px';
	canvasContainer.style.top = elementPositions.y + 'px';
	canvasContainer.style.zIndex = highlighter.getZIndex();
	canvasContainer.style.pointerEvents = 'none';
	canvasContainer.style.opacity = highlighter.getOpacity();
	window.addEventListener("resize", adjustCanvasOnResize.bind(highlighter));
}

// element on resize
function adjustCanvasOnResize() {
	var canvasContainer = this.getCanvasContainer();
	var element = this.getElement();
	var elementPositions = _functions2.default.getPosition(element);
	canvasContainer.style.left = elementPositions.x + 'px';
	canvasContainer.style.top = elementPositions.y + 'px';
}

// Adjust canvas element dimensions
function canvasElementAdjustDimensions(canvasElement, element) {
	canvasElement.style.width = element.scrollWidth + 'px';
	canvasElement.width = element.scrollWidth;
	canvasElement.style.height = element.scrollHeight + 'px';
	canvasElement.height = element.scrollHeight;
}

function init(highlighter, canvasContainer, element, canvasElement) {
	canvasContainerAdjustDimensions(highlighter, canvasContainer, element);
	canvasElementAdjustDimensions(canvasElement, element);
	initCanvasStyle(highlighter);
}

exports.default = {
	init: init
};

},{"./functions.js":5}],4:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _calibartion = require('./calibartion.js');

var _calibartion2 = _interopRequireDefault(_calibartion);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// put a point on canvas
function putPoint(highlighter, elementX, elementY) {
	var context = highlighter.getContext();
	var radius = highlighter.getRadius();
	context.beginPath();
	context.arc(elementX, elementY, radius, 0, Math.PI * 2);
	context.fill();
}

// start paint on canvas
function startDrawing(event) {
	var parents = $(event.target).parents();
	var container = event.target.parentNode;
	var elementX = event.touches ? event.touches[0].clientX : event.pageX;
	var elementY = event.touches ? event.touches[0].clientY : event.pageY;
	var transformOriginY = $(container).css('transform-origin').split(' ')[1];
	var calibarationLevel = this.getCalibarationLevel();
	var lang = this.getLanguage();
	var context = this.getContext();
	transformOriginY = transformOriginY.replace('px', '');

	elementX = _calibartion2.default.calibarateX(elementX, parents, container, calibarationLevel, lang);
	elementY = _calibartion2.default.calibarateY(elementY, parents, container, calibarationLevel, transformOriginY);

	putPoint(this, elementX, elementY);
	context.beginPath();
	context.moveTo(elementX, elementY);
}

// draw lines on canvas
function drawLine(event) {
	var parents = $(event.target).parents();
	var container = event.target.parentNode;
	var elementX = event.touches ? event.touches[0].clientX : event.pageX;
	var elementY = event.touches ? event.touches[0].clientY : event.pageY;
	var transformOriginY = $(container).css('transform-origin').split(' ')[1];
	var calibarationLevel = this.getCalibarationLevel();
	var lang = this.getLanguage();
	var context = this.getContext();
	transformOriginY = transformOriginY.replace('px', '');

	elementX = _calibartion2.default.calibarateX(elementX, parents, container, calibarationLevel, lang);
	elementY = _calibartion2.default.calibarateY(elementY, parents, container, calibarationLevel, transformOriginY);

	context.lineTo(elementX, elementY);
	context.stroke();
	putPoint(this, elementX, elementY);
	context.beginPath();
	context.moveTo(elementX, elementY);
}

exports.default = {
	putPoint: putPoint,
	startDrawing: startDrawing,
	drawLine: drawLine
};

},{"./calibartion.js":2}],5:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
// get position of element
function getPos(el) {
	var elements = [];
	for (var lx = 0, ly = 0; el != null; lx += el.offsetLeft, ly += el.offsetTop, el = el.offsetParent) {
		elements.push(el);
	}
	return { x: lx, y: ly, elements: elements };
}

// Helper function to get an element's exact position
function getPosition(el) {
	var xPos = 0;
	var yPos = 0;

	while (el) {
		if (el.tagName == "BODY") {
			// deal with browser quirks with body/window/document and page scroll
			var xScroll = el.scrollLeft || document.documentElement.scrollLeft;
			var yScroll = el.scrollTop || document.documentElement.scrollTop;

			xPos += el.offsetLeft - xScroll + el.clientLeft;
			yPos += el.offsetTop - yScroll + el.clientTop;
		} else {
			// for all other non-BODY elements
			xPos += el.offsetLeft - el.scrollLeft + el.clientLeft;
			yPos += el.offsetTop - el.scrollTop + el.clientTop;
		}

		el = el.offsetParent;
	}
	return {
		x: xPos,
		y: yPos
	};
}

exports.default = {
	getPos: getPos,
	getPosition: getPosition
};

},{}],6:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _scrollattach = require('./scrollattach.js');

var _scrollattach2 = _interopRequireDefault(_scrollattach);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function activate(highlighter) {
	var canvasContainer = highlighter.getCanvasContainer();
	canvasContainer.style.pointerEvents = 'auto';
	_scrollattach2.default.unhookCanvasFromElement();
	_scrollattach2.default.hookElementToCanvas();
}

function deactivate(highlighter) {
	var canvasContainer = highlighter.getCanvasContainer();
	canvasContainer.style.pointerEvents = 'none';
	_scrollattach2.default.hookCanvasToElement();
	_scrollattach2.default.unhookElementFromCanvas();
}

exports.default = {
	activate: activate,
	deactivate: deactivate
};

},{"./scrollattach.js":8}],7:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _draw = require('./draw.js');

var _draw2 = _interopRequireDefault(_draw);

var _canvasstyledimension = require('./canvasstyledimension.js');

var _canvasstyledimension2 = _interopRequireDefault(_canvasstyledimension);

var _scrollattach = require('./scrollattach.js');

var _scrollattach2 = _interopRequireDefault(_scrollattach);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// initiate canvas on initiating highlighter object
function initCanvasOnElement(highlighter) {
	var wholeContainer = highlighter.getWholeContainer();
	var element = highlighter.getElement();
	var canvasElement = document.createElement('canvas');
	var canvasContainer = document.createElement('div');
	wholeContainer.style.position = wholeContainer.style.position != 'absolute' ? 'relative' : 'absolute';

	// add highlighter
	canvasContainer.appendChild(canvasElement);
	wholeContainer.appendChild(canvasContainer);
	highlighter.options.canvasContainer = canvasContainer;
	highlighter.options.canvasElement = canvasElement;

	// init canvas styles and dimensions
	_canvasstyledimension2.default.init(highlighter, canvasContainer, element, canvasElement);

	// bind canvas to element on scroll
	_scrollattach2.default.initVariables(highlighter);
	_scrollattach2.default.hookCanvasToElement();

	// start draw on canvas
	canvasElement.addEventListener('touchstart', _draw2.default.startDrawing.bind(highlighter), false);
	canvasElement.addEventListener('touchmove', _draw2.default.drawLine.bind(highlighter), false);
}

exports.default = {
	initCanvasOnElement: initCanvasOnElement
};

},{"./canvasstyledimension.js":3,"./draw.js":4,"./scrollattach.js":8}],8:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
var element = void 0;
var canvasContainer = void 0;
//attach canvas to element
var attachCanvasToElement = void 0;
//attach element to canvas
var attachElementToCanvas = void 0;

function attachCanvasToElementEvent() {
	canvasContainer.scrollTop = element.scrollTop;
	canvasContainer.scrollLeft = element.scrollLeft;
}

function attachElementToCanvasEvent() {
	element.scrollTop = canvasContainer.scrollTop;
	element.scrollLeft = canvasContainer.scrollLeft;
}

function initVariables(highlighter) {
	attachCanvasToElement = attachCanvasToElementEvent.bind(highlighter);
	attachElementToCanvas = attachElementToCanvasEvent.bind(highlighter);
	canvasContainer = highlighter.getCanvasContainer();
	element = highlighter.getElement();
}

function hookCanvasToElement() {
	element.addEventListener('scroll', attachCanvasToElement);
}

function unhookCanvasFromElement() {
	element.removeEventListener('scroll', attachCanvasToElement);
}

function hookElementToCanvas() {
	canvasContainer.addEventListener('scroll', attachElementToCanvas);
}

function unhookElementFromCanvas() {
	canvasContainer.removeEventListener('scroll', attachElementToCanvas);
}

exports.default = {
	initVariables: initVariables,
	hookCanvasToElement: hookCanvasToElement,
	unhookCanvasFromElement: unhookCanvasFromElement,
	hookElementToCanvas: hookElementToCanvas,
	unhookElementFromCanvas: unhookElementFromCanvas
};

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
